//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_master_awvalid            O     1 reg
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1 reg
// dmem_master_arvalid            O     1 reg
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1 reg
// RDY_set_verbosity              O     1 const
// trace_data_out_get             O   299 reg
// RDY_trace_data_out_get         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_hart0_server_reset_response_get  I     1
// EN_trace_data_out_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     EN_trace_data_out_get,
	     trace_data_out_get,
	     RDY_trace_data_out_get);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // actionvalue method trace_data_out_get
  input  EN_trace_data_out_get;
  output [298 : 0] trace_data_out_get;
  output RDY_trace_data_out_get;

  // signals for module outputs
  wire [298 : 0] trace_data_out_get;
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       RDY_trace_data_out_get,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       hart0_server_reset_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_c_rg_cache_addr
  reg [31 : 0] imem_c_rg_cache_addr;
  wire [31 : 0] imem_c_rg_cache_addr$D_IN;
  wire imem_c_rg_cache_addr$EN;

  // register imem_c_rg_cache_b16
  reg [16 : 0] imem_c_rg_cache_b16;
  reg [16 : 0] imem_c_rg_cache_b16$D_IN;
  wire imem_c_rg_cache_b16$EN;

  // register imem_c_rg_f3
  reg [2 : 0] imem_c_rg_f3;
  wire [2 : 0] imem_c_rg_f3$D_IN;
  wire imem_c_rg_f3$EN;

  // register imem_c_rg_mstatus_MXR
  reg imem_c_rg_mstatus_MXR;
  wire imem_c_rg_mstatus_MXR$D_IN, imem_c_rg_mstatus_MXR$EN;

  // register imem_c_rg_pc
  reg [31 : 0] imem_c_rg_pc;
  reg [31 : 0] imem_c_rg_pc$D_IN;
  wire imem_c_rg_pc$EN;

  // register imem_c_rg_priv
  reg [1 : 0] imem_c_rg_priv;
  wire [1 : 0] imem_c_rg_priv$D_IN;
  wire imem_c_rg_priv$EN;

  // register imem_c_rg_satp
  reg [31 : 0] imem_c_rg_satp;
  wire [31 : 0] imem_c_rg_satp$D_IN;
  wire imem_c_rg_satp$EN;

  // register imem_c_rg_sstatus_SUM
  reg imem_c_rg_sstatus_SUM;
  wire imem_c_rg_sstatus_SUM$D_IN, imem_c_rg_sstatus_SUM$EN;

  // register imem_c_rg_tval
  reg [31 : 0] imem_c_rg_tval;
  reg [31 : 0] imem_c_rg_tval$D_IN;
  wire imem_c_rg_tval$EN;

  // register rg_csr_pc
  reg [31 : 0] rg_csr_pc;
  wire [31 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [31 : 0] rg_csr_val1;
  wire [31 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  reg [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_prev_mip
  reg [31 : 0] rg_prev_mip;
  wire [31 : 0] rg_prev_mip$D_IN;
  wire rg_prev_mip$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register rg_trap_trace_data
  reg [298 : 0] rg_trap_trace_data;
  wire [298 : 0] rg_trap_trace_data$D_IN;
  wire rg_trap_trace_data$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [666 : 0] stage2_rg_stage2;
  wire [666 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [473 : 0] stage3_rg_stage3;
  wire [473 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$mav_csr_write;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_mip_read,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write_word,
		csr_regfile$mv_update_mstatus_fs,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$ma_update_fcsr_fflags_flags,
	       csr_regfile$mv_update_fcsr_fflags,
	       csr_regfile$mv_update_fcsr_fflags_flags,
	       csr_regfile$read_fflags;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_ret_actions_from_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$ma_update_mstatus_fs_fs,
	       csr_regfile$mv_update_mstatus_fs_fs;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_ma_update_fcsr_fflags,
       csr_regfile$EN_ma_update_mstatus_fs,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_trace_data
  reg [298 : 0] f_trace_data$D_IN;
  wire [298 : 0] f_trace_data$D_OUT;
  wire f_trace_data$CLR,
       f_trace_data$DEQ,
       f_trace_data$EMPTY_N,
       f_trace_data$ENQ,
       f_trace_data$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_op,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req,
       stage2_fbox$EN_server_reset_request_put,
       stage2_fbox$EN_server_reset_response_get,
       stage2_fbox$RDY_server_reset_request_put,
       stage2_fbox$RDY_server_reset_response_get,
       stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_c_rl_assert_fail,
       CAN_FIRE_RL_imem_c_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_mip_cmd,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_trace_data_out_get,
       WILL_FIRE_RL_imem_c_rl_assert_fail,
       WILL_FIRE_RL_imem_c_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_mip_cmd,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_trace_data_out_get;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [298 : 0] MUX_f_trace_data$enq_1__VAL_1,
		 MUX_f_trace_data$enq_1__VAL_2,
		 MUX_f_trace_data$enq_1__VAL_3,
		 MUX_f_trace_data$enq_1__VAL_6,
		 MUX_f_trace_data$enq_1__VAL_7,
		 MUX_f_trace_data$enq_1__VAL_8,
		 MUX_rg_trap_trace_data$write_1__VAL_2;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [31 : 0] MUX_imem_c_rg_tval$write_1__VAL_5,
		MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_5;
  wire [16 : 0] MUX_imem_c_rg_cache_b16$write_1__VAL_2;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_3,
       MUX_f_trace_data$enq_1__SEL_4,
       MUX_imem_c_rg_cache_addr$write_1__SEL_2,
       MUX_imem_c_rg_cache_addr$write_1__SEL_3,
       MUX_imem_c_rg_cache_b16$write_1__SEL_10,
       MUX_imem_c_rg_cache_b16$write_1__SEL_5,
       MUX_imem_c_rg_cache_b16$write_1__SEL_6,
       MUX_imem_c_rg_cache_b16$write_1__SEL_7,
       MUX_imem_c_rg_cache_b16$write_1__SEL_8,
       MUX_imem_c_rg_cache_b16$write_1__SEL_9,
       MUX_imem_c_rg_f3$write_1__SEL_1,
       MUX_imem_c_rg_f3$write_1__SEL_2,
       MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4,
       MUX_imem_c_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_next_pc$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_14,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_rg_trap_trace_data$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stage3_rg_full$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2271;
  reg [31 : 0] v__h2265;
  // synopsys translate_on

  // remaining internal signals
  reg [95 : 0] CASE_stage2_rg_stage2_BITS_600_TO_598_0_stage2_ETC__q28,
	       CASE_stage2_rg_stage2_BITS_600_TO_598_1_IF_sta_ETC__q32;
  reg [63 : 0] CASE_stage2_rg_stage2_BITS_600_TO_598_2_stage2_ETC__q26,
	       CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22,
	       x_out_data_to_stage3_frd_val__h7335,
	       x_out_fbypass_rd_val__h8555;
  reg [31 : 0] CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31,
	       CASE_theResult__281_BITS_6_TO_0_0b100011_alu_o_ETC__q21,
	       CASE_theResult__281_BITS_6_TO_0_0b100011_rs2_v_ETC__q9,
	       CASE_theResult__281_BITS_6_TO_0_0b1100111_alu__ETC__q25,
	       CASE_theResult__281_BITS_6_TO_0_0b1100111_data_ETC__q19,
	       CASE_theResult__281_BITS_6_TO_0_0b11_csr_regfi_ETC__q23,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077,
	       IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935,
	       _theResult_____1_fst__h18608,
	       alu_outputs_trace_data_pc__h25734,
	       rs1_val__h34691,
	       value__h7751,
	       value__h7965,
	       x_out_bypass_rd_val__h8368,
	       x_out_data_to_stage2_addr__h16077,
	       x_out_data_to_stage2_val1__h16078,
	       x_out_data_to_stage3_rd_val__h7331;
  reg [4 : 0] CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27,
	      CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q24,
	      x_out_bypass_rd__h8367,
	      x_out_data_to_stage2_rd__h16076,
	      x_out_data_to_stage3_fpr_flags__h7334,
	      x_out_data_to_stage3_rd__h7330,
	      x_out_fbypass_rd__h8554;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q16,
	      CASE_theResult__281_BITS_31_TO_20_0b0_CASE_rg__ETC__q17,
	      alu_outputs_exc_code__h17692,
	      x_out_trap_info_exc_code__h7861;
  reg [2 : 0] CASE_theResult__281_BITS_6_TO_0_0b1100011_0_0b_ETC__q30,
	      CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29;
  reg CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_ne_ETC__q2,
      CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_st_ETC__q4,
      CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3,
      CASE_theResult__281_BITS_14_TO_12_0b10_NOT_the_ETC__q10,
      CASE_theResult__281_BITS_14_TO_12_0b10_theResu_ETC__q13,
      CASE_theResult__281_BITS_6_TO_0_0b10011_IF_ime_ETC__q15,
      CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12,
      CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q20,
      CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11,
      CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301,
      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d262,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d280,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d295,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d309,
      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314;
  wire [632 : 0] IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2123;
  wire [298 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116;
  wire [228 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2114;
  wire [223 : 0] IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1948,
		 csr_regfile_csr_trap_actions_326_BITS_65_TO_2__ETC___d2339;
  wire [191 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2113;
  wire [127 : 0] csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d2346;
  wire [95 : 0] IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939,
		stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945;
  wire [63 : 0] _theResult____h33054,
		_theResult___snd_fst_rd_val__h8536,
		alu_outputs___1_fval1__h17665,
		alu_outputs___1_fval2__h16631,
		alu_outputs___1_fval3__h17667,
		alu_outputs___1_trace_data_word3__h25488,
		alu_outputs___1_trace_data_word3__h25521,
		alu_outputs___1_trace_data_word3__h25584,
		alu_outputs___1_trace_data_word5__h25523,
		cpi__h33056,
		cpifrac__h33057,
		delta_CPI_cycles__h33052,
		delta_CPI_instrs___1__h33098,
		delta_CPI_instrs__h33053,
		output_stage2___1_data_to_stage3_frd_val__h7249,
		output_stage2___1_data_to_stage3_trace_data_word5__h24429,
		rd_val__h15664,
		rd_val__h15690,
		rd_val__h15717,
		wdata_from_gpr__h30281,
		x__h32937,
		x__h33055,
		x__h35240,
		x__h35249,
		x_out_data_to_stage2_fval1__h16080,
		x_out_data_to_stage2_fval3__h16082;
  wire [35 : 0] IF_near_mem_imem_exc__00_THEN_near_mem_imem_ex_ETC___d2313;
  wire [31 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1621,
		IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2078,
		IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d380,
		IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2421,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d627,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d628,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d629,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d630,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d631,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d632,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d633,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d635,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d637,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d638,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d639,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d641,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d642,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d643,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d645,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d646,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d647,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d649,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d650,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d651,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d652,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d653,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d654,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d655,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d656,
		IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d657,
		IF_csr_regfilemav_csr_write_BIT_32_THEN_2_ELSE_0__q1,
		IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d381,
		SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1556,
		_theResult_____1_fst__h18601,
		_theResult_____1_fst__h18636,
		_theResult____h16436,
		_theResult____h5281,
		_theResult___snd_snd__h20931,
		addr_of_b32___1__h23028,
		addr_of_b32___1__h31601,
		addr_of_b32___1__h41434,
		addr_of_b32__h22922,
		addr_of_b32__h31495,
		addr_of_b32__h41328,
		alu_outputs___1_addr__h16267,
		alu_outputs___1_addr__h16298,
		alu_outputs___1_addr__h16335,
		alu_outputs___1_trace_data_instr__h25693,
		alu_outputs___1_trace_data_pc__h25691,
		alu_outputs___1_trace_data_word1__h25519,
		alu_outputs___1_trace_data_word2__h25520,
		alu_outputs___1_trace_data_word2__h25696,
		alu_outputs___1_val1__h16927,
		alu_outputs___1_val1__h16957,
		branch_target__h16244,
		data_to_stage2_addr__h16061,
		data_to_stage2_val2__h16063,
		eaddr__h16560,
		eaddr__h16609,
		fall_through_pc__h15768,
		instr___1__h8760,
		instr__h10175,
		instr__h10565,
		instr__h10681,
		instr__h10746,
		instr__h11063,
		instr__h11401,
		instr__h11585,
		instr__h11714,
		instr__h12151,
		instr__h12323,
		instr__h12496,
		instr__h12689,
		instr__h12882,
		instr__h12999,
		instr__h13177,
		instr__h13296,
		instr__h13391,
		instr__h13527,
		instr__h13663,
		instr__h13799,
		instr__h14137,
		instr__h14217,
		instr__h14382,
		instr__h14574,
		instr__h14769,
		instr__h15017,
		instr__h15182,
		instr__h15442,
		instr__h5279,
		instr__h9071,
		instr__h9216,
		instr__h9408,
		instr__h9603,
		instr__h9832,
		instr_out___1__h8906,
		instr_out___1__h8938,
		next_pc___1__h20228,
		next_pc__h20226,
		output_stage2___1_data_to_stage3_rd_val__h7278,
		output_stage2___1_data_to_stage3_trace_data_word1__h24404,
		output_stage2___1_data_to_stage3_trace_data_word1__h24425,
		rd_val___1__h18515,
		rd_val___1__h18597,
		rd_val___1__h18604,
		rd_val___1__h18611,
		rd_val___1__h18618,
		rd_val___1__h18625,
		rd_val__h15616,
		rd_val__h16485,
		rd_val__h16510,
		rd_val__h16534,
		rd_val__h20831,
		rd_val__h20883,
		rd_val__h20905,
		rd_val__h8704,
		rs1_val__h33650,
		rs1_val_bypassed__h5289,
		rs2_val__h16240,
		td_word1__h26290,
		trace_data___1_word2__h24115,
		trap_info_tval__h20031,
		val__h15618,
		val__h8706,
		value__h20111,
		x__h24176,
		x__h24190,
		x__h34093,
		x__h35176,
		x_out_data_to_stage2_instr__h16074,
		x_out_data_to_stage2_val2__h16079,
		x_out_next_pc__h15783,
		y__h34969;
  wire [20 : 0] SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446,
		theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q7;
  wire [19 : 0] imm20__h11453;
  wire [15 : 0] IF_imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_ime_ETC___d378,
		imem_c_rg_cache_b16_BITS_15_TO_0__q5;
  wire [12 : 0] SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475,
		theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q6;
  wire [11 : 0] imm12__h11325,
		imm12__h11949,
		imm12__h12164,
		imm12__h12360,
		imm12__h12705,
		imm12__h15018,
		imm12__h9072,
		imm12__h9409,
		offset__h9779,
		theResult__281_BITS_31_TO_20__q18,
		theResult__281_BITS_31_TO_25_CONCAT_theResult__ETC__q8;
  wire [9 : 0] nzimm10__h11947, nzimm10__h12162;
  wire [8 : 0] offset__h10690, offset__h14947;
  wire [7 : 0] offset__h8806;
  wire [6 : 0] offset__h9351;
  wire [5 : 0] imm6__h11323;
  wire [4 : 0] IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2046,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2047,
	       IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2049,
	       IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2064,
	       data_to_stage2_rd__h16060,
	       offset_BITS_4_TO_0___h15567,
	       offset_BITS_4_TO_0___h9340,
	       offset_BITS_4_TO_0___h9771,
	       rd__h9411,
	       rs1__h9410,
	       shamt__h16432,
	       td1_rd__h36424,
	       x_rd__h32676;
  wire [3 : 0] alu_outputs___1_exc_code__h16923,
	       cur_verbosity__h3661,
	       x_exc_code__h41614,
	       x_out_trap_info_exc_code__h20034;
  wire [2 : 0] rm__h16210;
  wire IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1030,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1196,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1825,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2297,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2304,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746,
       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748,
       IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667,
       IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668,
       IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1072,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1122,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1131,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1139,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1146,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1165,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1176,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1182,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1264,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1277,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1292,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1328,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1998,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2042,
       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2447,
       IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661,
       IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663,
       NOT_IF_NOT_stage1_rg_full_21_22_OR_NOT_near_me_ETC___d2250,
       NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1380,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1387,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1392,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850,
       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958,
       NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1854,
       NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1868,
       NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d2270,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2217,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2219,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2234,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2265,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2281,
       NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104,
       NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d2019,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d2237,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d365,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682,
       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684,
       NOT_imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_c_ETC___d1865,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1235,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1249,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1295,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1332,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1353,
       NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d2441,
       NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1876,
       NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1885,
       NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2212,
       NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2214,
       NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1329,
       NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1350,
       NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1424,
       NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d2291,
       NOT_rg_next_pc_471_BITS_1_TO_0_472_EQ_0b0_473__ETC___d2480,
       NOT_soc_map_m_pc_reset_value__806_BITS_1_TO_0__ETC___d1820,
       NOT_stage1_rg_full_21_22_OR_near_mem_imem_vali_ETC___d2316,
       NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218,
       NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1448,
       NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690,
       NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697,
       NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135,
       NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143,
       NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d164,
       NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d279,
       NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d725,
       _0_OR_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d2034,
       csr_regfile_RDY_server_reset_response_get__785_ETC___d1800,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1888,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1972,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2146,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2190,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2201,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2205,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2207,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2209,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2211,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2240,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2259,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2268,
       csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2359,
       csr_regfile_interrupt_pending_rg_cur_priv_0_84_ETC___d1856,
       csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d460,
       csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d466,
       csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2229,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2231,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358,
       imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794,
       imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d1851,
       imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326,
       imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13,
       imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d375,
       near_mem_RDY_server_reset_request_put__761_AND_ETC___d1773,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1682,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1685,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1688,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1691,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1694,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1697,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1700,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1703,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1708,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1713,
       near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1716,
       near_mem_imem_exc__00_OR_NOT_rg_cur_priv_0_EQ__ETC___d1321,
       near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1221,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1228,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1240,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1254,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1271,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1284,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1300,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1314,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1338,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1359,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1441,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1450,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1463,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1479,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1483,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1487,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1522,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1683,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1686,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1689,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1692,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1695,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1698,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1701,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1704,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1709,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1714,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1717,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975,
       near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286,
       rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1348,
       rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1426,
       rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2284,
       rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362,
       rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2451,
       rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2465,
       rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2485,
       rg_state_9_EQ_3_824_AND_stage3_rg_full_5_OR_st_ETC___d1891,
       rg_trap_info_319_BITS_67_TO_36_320_EQ_csr_regf_ETC___d2342,
       stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680,
       stage1_rg_full_21_AND_near_mem_imem_valid_AND__ETC___d1827,
       stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1957,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1227,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1237,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1238,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1239,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1251,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1252,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1253,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1268,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1269,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1270,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1281,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1282,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1283,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1297,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1298,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1299,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1311,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1312,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1313,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1334,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1335,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1336,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1337,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1355,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1356,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1357,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1358,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1383,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1390,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1431,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1432,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1433,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1436,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1437,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1438,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1439,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1477,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1494,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1520,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1651,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1706,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1707,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1711,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1712,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665,
       stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1959,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1961,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1963,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1965,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1967,
       stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d728,
       stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155,
       stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d202,
       stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d231,
       stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_2_08_ETC___d286,
       stage3_rg_full_5_OR_NOT_stage2_rg_full_01_58_O_ETC___d1879,
       stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d730,
       stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d738;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // actionvalue method trace_data_out_get
  assign trace_data_out_get = f_trace_data$D_OUT ;
  assign RDY_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign CAN_FIRE_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign WILL_FIRE_trace_data_out_get = EN_trace_data_out_get ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .ma_update_fcsr_fflags_flags(csr_regfile$ma_update_fcsr_fflags_flags),
			    .ma_update_mstatus_fs_fs(csr_regfile$ma_update_mstatus_fs_fs),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .mv_update_fcsr_fflags_flags(csr_regfile$mv_update_fcsr_fflags_flags),
			    .mv_update_mstatus_fs_fs(csr_regfile$mv_update_mstatus_fs_fs),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_ma_update_fcsr_fflags(csr_regfile$EN_ma_update_fcsr_fflags),
			    .EN_ma_update_mstatus_fs(csr_regfile$EN_ma_update_mstatus_fs),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_frm(csr_regfile$read_frm),
			    .read_fflags(csr_regfile$read_fflags),
			    .mv_update_fcsr_fflags(csr_regfile$mv_update_fcsr_fflags),
			    .mv_update_mstatus_fs(csr_regfile$mv_update_mstatus_fs),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(csr_regfile$csr_mip_read),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_trace_data
  FIFO2 #(.width(32'd299), .guarded(1'd1)) f_trace_data(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_trace_data$D_IN),
							.ENQ(f_trace_data$ENQ),
							.DEQ(f_trace_data$DEQ),
							.CLR(f_trace_data$CLR),
							.D_OUT(f_trace_data$D_OUT),
							.FULL_N(f_trace_data$FULL_N),
							.EMPTY_N(f_trace_data$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_reqs$ENQ),
					       .DEQ(stage1_f_reset_reqs$DEQ),
					       .CLR(stage1_f_reset_reqs$CLR),
					       .FULL_N(stage1_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_rsps$ENQ),
					       .DEQ(stage1_f_reset_rsps$DEQ),
					       .CLR(stage1_f_reset_rsps$CLR),
					       .FULL_N(stage1_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_reqs$ENQ),
					       .DEQ(stage2_f_reset_reqs$DEQ),
					       .CLR(stage2_f_reset_reqs$CLR),
					       .FULL_N(stage2_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_rsps$ENQ),
					       .DEQ(stage2_f_reset_rsps$DEQ),
					       .CLR(stage2_f_reset_rsps$CLR),
					       .FULL_N(stage2_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkFBox_Top stage2_fbox(.verbosity(4'd0),
			 .CLK(CLK),
			 .RST_N(RST_N),
			 .req_f7(stage2_fbox$req_f7),
			 .req_opcode(stage2_fbox$req_opcode),
			 .req_rm(stage2_fbox$req_rm),
			 .req_rs2(stage2_fbox$req_rs2),
			 .req_v1(stage2_fbox$req_v1),
			 .req_v2(stage2_fbox$req_v2),
			 .req_v3(stage2_fbox$req_v3),
			 .EN_server_reset_request_put(stage2_fbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(stage2_fbox$EN_server_reset_response_get),
			 .EN_req(stage2_fbox$EN_req),
			 .RDY_server_reset_request_put(stage2_fbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(stage2_fbox$RDY_server_reset_response_get),
			 .valid(stage2_fbox$valid),
			 .word_fst(stage2_fbox$word_fst),
			 .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_reqs$ENQ),
					       .DEQ(stage3_f_reset_reqs$DEQ),
					       .CLR(stage3_f_reset_reqs$CLR),
					       .FULL_N(stage3_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_rsps$ENQ),
					       .DEQ(stage3_f_reset_rsps$DEQ),
					       .CLR(stage3_f_reset_rsps$CLR),
					       .FULL_N(stage3_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd12 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_stage1_mip_cmd
  assign CAN_FIRE_RL_rl_stage1_mip_cmd =
	     f_trace_data$FULL_N && rg_state == 4'd3 &&
	     stage1_rg_full_21_AND_near_mem_imem_valid_AND__ETC___d1827 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     !csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 ;
  assign WILL_FIRE_RL_rl_stage1_mip_cmd = CAN_FIRE_RL_rl_stage1_mip_cmd ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd3 && !stage3_rg_full && stage2_rg_full &&
	     NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2284 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     (near_mem$imem_exc ||
	      ((_theResult____h5281[6:0] == 7'b1100011) ?
		 _theResult____h5281[14:12] != 3'd0 &&
		 _theResult____h5281[14:12] != 3'b001 &&
		 _theResult____h5281[14:12] != 3'b100 &&
		 _theResult____h5281[14:12] != 3'b101 &&
		 _theResult____h5281[14:12] != 3'b110 &&
		 _theResult____h5281[14:12] != 3'b111 :
		 _theResult____h5281[6:0] != 7'b1101111 &&
		 ((_theResult____h5281[6:0] == 7'b1100111) ?
		    _theResult____h5281[14:12] != 3'd0 :
		    (_theResult____h5281[6:0] != 7'b0110011 ||
		     _theResult____h5281[31:25] != 7'b0000001) &&
		    IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2304))) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     f_trace_data$FULL_N && rg_state == 4'd4 &&
	     NOT_stage1_rg_full_21_22_OR_near_mem_imem_vali_ETC___d2316 ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     f_trace_data$FULL_N &&
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2451 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_14 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_14 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     rg_state == 4'd12 &&
	     csr_regfile$wfi_resume &&
	     NOT_stage1_rg_full_21_22_OR_near_mem_imem_vali_ETC___d2316 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd12 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd3 &&
	     stage1_rg_full_21_AND_near_mem_imem_valid_AND__ETC___d1827 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_c_rl_assert_fail
  assign CAN_FIRE_RL_imem_c_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_c_rl_assert_fail =
	     CAN_FIRE_RL_imem_c_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__785_ETC___d1800 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (!stage3_rg_full || f_trace_data$FULL_N) &&
	     (NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1868 ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794) &&
	     rg_state_9_EQ_3_824_AND_stage3_rg_full_5_OR_st_ETC___d1891 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // rule RL_imem_c_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_c_rl_fetch_next_32b =
	     near_mem$imem_valid && imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_c_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     f_trace_data$FULL_N &&
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1295 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_13 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem_RDY_server_reset_request_put__761_AND_ETC___d1773 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_fbox$RDY_server_reset_response_get &&
	     stage2_f_reset_rsps$FULL_N &&
	     stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin =
	     stage2_fbox$RDY_server_reset_request_put &&
	     stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_f_trace_data$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full ;
  assign MUX_f_trace_data$enq_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_f_trace_data$enq_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_imem_c_rg_cache_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_addr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2240 &&
	     near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_trap_fetch && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_finish_FENCE && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_finish_FENCE_I && near_mem$imem_valid ;
  assign MUX_imem_c_rg_cache_b16$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	     near_mem$imem_valid ;
  assign MUX_imem_c_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_c_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ;
  assign MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_c_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_next_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_2 =
	     (!csr_regfile$access_permitted_1 || f_trace_data$FULL_N) &&
	     rg_state == 4'd6 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     (!csr_regfile$access_permitted_2 || f_trace_data$FULL_N) &&
	     rg_state == 4'd7 ;
  assign MUX_rg_state$write_1__SEL_4 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1235 ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1249 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     near_mem$RDY_server_fence_i_request_put && f_trace_data$FULL_N &&
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2465 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     near_mem$RDY_server_fence_request_put && f_trace_data$FULL_N &&
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2485 ;
  assign MUX_rg_state$write_1__SEL_13 =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_14 =
	     f_trace_data$FULL_N &&
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1353 ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_trap_trace_data$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h34969 or
	  IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2421)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2421;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h34969;
    endcase
  end
  assign MUX_f_trace_data$enq_1__VAL_1 =
	     { stage3_rg_stage3[298:192],
	       x__h24176,
	       stage3_rg_stage3[159:96],
	       x__h24190,
	       stage3_rg_stage3[63:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_2 =
	     { 5'd16,
	       rg_trap_trace_data[293:229],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       x__h34093,
	       x__h35240,
	       csr_regfile$mav_csr_write[64:33],
	       x__h35249 } ;
  assign MUX_f_trace_data$enq_1__VAL_3 =
	     { 5'd16,
	       rg_trap_trace_data[293:229],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       x__h35176,
	       x__h35240,
	       csr_regfile$mav_csr_write[64:33],
	       x__h35249 } ;
  assign MUX_f_trace_data$enq_1__VAL_6 =
	     { 203'h0EAAAAAAA955555554AAAAAAAAAAAAAAAAA0000000000000344,
	       csr_regfile$csr_mip_read,
	       64'hAAAAAAAAAAAAAAAA } ;
  assign MUX_f_trace_data$enq_1__VAL_7 =
	     { rg_trap_interrupt ? 5'd17 : 5'd14,
	       csr_regfile$csr_trap_actions[97:66],
	       rg_trap_trace_data[261:229],
	       x_rd__h32676,
	       csr_regfile_csr_trap_actions_326_BITS_65_TO_2__ETC___d2339 } ;
  assign MUX_f_trace_data$enq_1__VAL_8 =
	     { 5'd15,
	       csr_regfile$csr_ret_actions[65:34],
	       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682,
	       alu_outputs___1_trace_data_instr__h25693,
	       td1_rd__h36424,
	       csr_regfile$csr_ret_actions[31:0],
	       192'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_imem_c_rg_cache_b16$write_1__VAL_2 =
	     { 1'd1, near_mem$imem_instr[31:16] } ;
  assign MUX_imem_c_rg_tval$write_1__VAL_5 = near_mem$imem_pc + 32'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     NOT_soc_map_m_pc_reset_value__806_BITS_1_TO_0__ETC___d1820 ?
	       addr_of_b32___1__h23028 :
	       addr_of_b32__h22922 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     NOT_IF_NOT_stage1_rg_full_21_22_OR_NOT_near_me_ETC___d2250 ?
	       addr_of_b32___1__h31601 :
	       addr_of_b32__h31495 ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     NOT_rg_next_pc_471_BITS_1_TO_0_472_EQ_0b0_473__ETC___d2480 ?
	       addr_of_b32___1__h41434 :
	       addr_of_b32__h41328 ;
  assign MUX_rg_state$write_1__VAL_1 = rg_run_on_reset ? 4'd3 : 4'd2 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_1 ? 4'd8 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_2 ? 4'd8 : 4'd4 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { imem_c_rg_pc,
	       4'd2,
	       near_mem$imem_exc ? imem_c_rg_tval : trap_info_tval__h20031 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { value__h7751,
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[592:561] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { imem_c_rg_pc,
	       IF_near_mem_imem_exc__00_THEN_near_mem_imem_ex_ETC___d2313 } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { imem_c_rg_pc, x_exc_code__h41614, 32'd0 } ;
  assign MUX_rg_trap_trace_data$write_1__VAL_2 =
	     { stage2_rg_stage2[298:224],
	       CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31,
	       stage2_rg_stage2[191:96],
	       CASE_stage2_rg_stage2_BITS_600_TO_598_1_IF_sta_ETC__q32 } ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2268 ||
	     (NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d2270 ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2212) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2259 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 ||
	      !stage2_rg_full) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 ||
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 &&
	     stage2_rg_full ;
  assign MUX_stage3_rg_full$write_1__VAL_2 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_c_rg_cache_addr
  assign imem_c_rg_cache_addr$D_IN = near_mem$imem_pc ;
  assign imem_c_rg_cache_addr$EN =
	     MUX_rg_state$write_1__SEL_6 && near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2240 &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // register imem_c_rg_cache_b16
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_cache_b16$write_1__VAL_2 or
	  MUX_imem_c_rg_cache_addr$write_1__SEL_3 or
	  MUX_imem_c_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_5 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_6 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_7 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_8 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_9 or
	  MUX_imem_c_rg_cache_b16$write_1__SEL_10)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: imem_c_rg_cache_b16$D_IN = 17'd43690;
    WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_addr$write_1__SEL_3:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_addr$write_1__SEL_2:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_5:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_6:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_7:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_8:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_9:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    MUX_imem_c_rg_cache_b16$write_1__SEL_10:
	imem_c_rg_cache_b16$D_IN = MUX_imem_c_rg_cache_b16$write_1__VAL_2;
    default: imem_c_rg_cache_b16$D_IN =
		 17'b01010101010101010 /* unspecified value */ ;
  endcase
  assign imem_c_rg_cache_b16$EN =
	     MUX_rg_state$write_1__SEL_6 && near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2240 &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register imem_c_rg_f3
  assign imem_c_rg_f3$D_IN = 3'b010 ;
  assign imem_c_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_mstatus_MXR
  assign imem_c_rg_mstatus_MXR$D_IN =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_c_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_pc
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h15783 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_c_rg_pc$write_1__SEL_4 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  imem_c_rg_pc$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  imem_c_rg_pc$D_IN = x_out_next_pc__h15783;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_c_rg_pc$D_IN = x_out_next_pc__h15783;
      MUX_imem_c_rg_pc$write_1__SEL_4: imem_c_rg_pc$D_IN = rg_next_pc;
      default: imem_c_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_c_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_c_rg_priv
  assign imem_c_rg_priv$D_IN = rg_cur_priv ;
  assign imem_c_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_satp
  assign imem_c_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_c_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_sstatus_SUM
  assign imem_c_rg_sstatus_SUM$D_IN =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      MUX_imem_c_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_sstatus[18] :
	       rg_sstatus_SUM ;
  assign imem_c_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_c_rg_tval
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h15783 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_c_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_tval$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  imem_c_rg_tval$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  imem_c_rg_tval$D_IN = x_out_next_pc__h15783;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_c_rg_tval$D_IN = x_out_next_pc__h15783;
      MUX_imem_c_rg_pc$write_1__SEL_4: imem_c_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  imem_c_rg_tval$D_IN = MUX_imem_c_rg_tval$write_1__VAL_5;
      default: imem_c_rg_tval$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_c_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = imem_c_rg_pc ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h16078 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_next_pc
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_rg_next_pc$write_1__SEL_3 or x_out_next_pc__h15783)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      MUX_rg_next_pc$write_1__SEL_3: rg_next_pc$D_IN = x_out_next_pc__h15783;
      default: rg_next_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // register rg_prev_mip
  assign rg_prev_mip$D_IN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd ?
	       csr_regfile$csr_mip_read :
	       32'd0 ;
  assign rg_prev_mip$EN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd || WILL_FIRE_RL_rl_reset_start ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = MUX_imem_c_rg_f3$write_1__SEL_1 ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = MUX_imem_c_rg_f3$write_1__SEL_1 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_6 or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__SEL_8 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 4'd3;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd9;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd12;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       x_out_data_to_stage2_instr__h16074 :
	       stage2_rg_stage2[632:601] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_trace_data
  assign rg_trap_trace_data$D_IN =
	     MUX_rg_trap_trace_data$write_1__SEL_1 ?
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116 :
	       MUX_rg_trap_trace_data$write_1__VAL_2 ;
  assign rg_trap_trace_data$EN = MUX_rg_trap_interrupt$write_1__SEL_1 ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_c_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_c_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_WFI: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA || WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_trap: stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset_begin or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_c_rg_f3$write_1__SEL_1 or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset_begin: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_c_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = WILL_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_c_rg_pc,
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2123 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage3_rg_full$write_1__VAL_2 or
	  MUX_imem_c_rg_f3$write_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN = MUX_stage3_rg_full$write_1__VAL_2;
    MUX_imem_c_rg_f3$write_1__SEL_1: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[664:601],
	       stage2_rg_stage2[666:665],
	       1'd1,
	       x_out_data_to_stage3_rd__h7330,
	       x_out_data_to_stage3_rd_val__h7331,
	       stage2_rg_stage2[600:598] != 3'd0 &&
	       stage2_rg_stage2[600:598] != 3'd1 &&
	       stage2_rg_stage2[600:598] != 3'd4 &&
	       stage2_rg_stage2[600:598] != 3'd2 &&
	       stage2_rg_stage2[600:598] != 3'd3,
	       stage2_rg_stage2[600:598] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3,
	       x_out_data_to_stage3_fpr_flags__h7334,
	       x_out_data_to_stage3_frd_val__h7335,
	       stage2_rg_stage2[298:224],
	       IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1948 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h34691 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  assign csr_regfile$csr_ret_actions_from_priv =
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d2441 ?
	       2'b11 :
	       ((!near_mem$imem_exc &&
		 IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2447) ?
		  2'b01 :
		  2'b0) ;
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0] ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$ma_update_fcsr_fflags_flags = stage3_rg_stage3[367:363] ;
  assign csr_regfile$ma_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h33650 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$mv_update_fcsr_fflags_flags = stage3_rg_stage3[367:363] ;
  assign csr_regfile$mv_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign csr_regfile$EN_ma_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[407] &&
	     stage3_rg_stage3[369] ;
  assign csr_regfile$EN_ma_update_mstatus_fs =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[407] &&
	     (stage3_rg_stage3[369] || stage3_rg_stage3[368]) ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem_RDY_server_reset_request_put__761_AND_ETC___d1773 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_trace_data
  always@(MUX_f_trace_data$enq_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_2 or
	  MUX_f_trace_data$enq_1__SEL_3 or
	  MUX_f_trace_data$enq_1__VAL_3 or
	  MUX_f_trace_data$enq_1__SEL_4 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116 or
	  WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_stage1_mip_cmd or
	  MUX_f_trace_data$enq_1__VAL_6 or
	  WILL_FIRE_RL_rl_trap or
	  MUX_f_trace_data$enq_1__VAL_7 or
	  WILL_FIRE_RL_rl_stage1_xRET or MUX_f_trace_data$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_trace_data$enq_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_1;
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_2;
      MUX_f_trace_data$enq_1__SEL_3:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_3;
      MUX_f_trace_data$enq_1__SEL_4:
	  f_trace_data$D_IN =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116;
      WILL_FIRE_RL_rl_reset_start:
	  f_trace_data$D_IN =
	      299'h02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_stage1_mip_cmd:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_6;
      WILL_FIRE_RL_rl_trap: f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_7;
      WILL_FIRE_RL_rl_stage1_xRET:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_8;
      default: f_trace_data$D_IN =
		   299'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data$ENQ =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_mip_cmd ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign f_trace_data$DEQ = EN_trace_data_out_get ;
  assign f_trace_data$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = _theResult____h5281[19:15] ;
  assign fpr_regfile$read_rs2_rs2 = _theResult____h5281[24:20] ;
  assign fpr_regfile$read_rs3_rs3 = _theResult____h5281[31:27] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[406:402] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[362:299] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[407] &&
	     stage3_rg_stage3[368] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h5281[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h5281[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_trace_data$enq_1__SEL_3) ?
	       rg_trap_instr[11:7] :
	       stage3_rg_stage3[406:402] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_trace_data$enq_1__SEL_3) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[401:370] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[407] &&
	     !stage3_rg_stage3[368] ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h16077 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h16078[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h16074[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  assign near_mem$dmem_req_op =
	     (_theResult____h5281[6:0] == 7'b0000011 ||
	      _theResult____h5281[6:0] == 7'b0000111) ?
	       2'd0 :
	       ((_theResult____h5281[6:0] == 7'b0100011 ||
		 _theResult____h5281[6:0] == 7'b0100111) ?
		  2'd1 :
		  2'd2) ;
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  assign near_mem$dmem_req_store_value =
	     (_theResult____h5281[6:0] == 7'b0100111) ?
	       alu_outputs___1_fval2__h16631 :
	       wdata_from_gpr__h30281 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or
	  MUX_imem_c_rg_tval$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_c_rg_f3$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_c_rg_tval$write_1__VAL_5;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ? imem_c_rg_f3 : 3'b010 ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or imem_c_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1 || MUX_imem_c_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_c_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_c_rg_f3$write_1__SEL_1 ||
	      MUX_imem_c_rg_f3$write_1__SEL_2 ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6) ?
	       rg_cur_priv :
	       imem_c_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ?
	       imem_c_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_c_rg_f3$write_1__SEL_1 or
	  MUX_imem_c_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_c_rl_fetch_next_32b or imem_c_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_c_rg_f3$write_1__SEL_1 || MUX_imem_c_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_c_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_c_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 ||
	     WILL_FIRE_RL_imem_c_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2146 ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_11 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_12 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_13 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = x_out_data_to_stage2_instr__h16074[31:25] ;
  assign stage2_fbox$req_opcode = x_out_data_to_stage2_instr__h16074[6:0] ;
  assign stage2_fbox$req_rm = rm__h16210 ;
  assign stage2_fbox$req_rs2 = x_out_data_to_stage2_instr__h16074[24:20] ;
  assign stage2_fbox$req_v1 =
	     (NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
	      _0_OR_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d2034 &&
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2042) ?
	       { 32'd0, x_out_data_to_stage2_val1__h16078 } :
	       x_out_data_to_stage2_fval1__h16080 ;
  assign stage2_fbox$req_v2 = alu_outputs___1_fval2__h16631 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_fval3__h16082 ;
  assign stage2_fbox$EN_server_reset_request_put =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_fbox$EN_server_reset_response_get =
	     CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2190 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h16074[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h5281[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h16078 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h16079 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     _theResult____h5281[6:0] == 7'b0110011 &&
	     _theResult____h5281[31:25] == 7'b0000001 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1030 =
	     ((_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011) &&
	      (_theResult____h5281[14:12] == 3'b001 ||
	       _theResult____h5281[14:12] == 3'b101)) ?
	       _theResult____h5281[31] ||
	       _theResult____h5281[29:26] != 4'b0 ||
	       _theResult____h5281[6:0] == 7'b0010011 &&
	       _theResult____h5281[25] :
	       CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 =
	     (_theResult____h5281[6:0] == 7'b1100011) ?
	       _theResult____h5281[14:12] != 3'd0 &&
	       _theResult____h5281[14:12] != 3'b001 &&
	       _theResult____h5281[14:12] != 3'b100 &&
	       _theResult____h5281[14:12] != 3'b101 &&
	       _theResult____h5281[14:12] != 3'b110 &&
	       _theResult____h5281[14:12] != 3'b111 ||
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 :
	       _theResult____h5281[6:0] == 7'b1101111 ||
	       _theResult____h5281[6:0] == 7'b1100111 ||
	       (_theResult____h5281[6:0] != 7'b0110011 ||
		_theResult____h5281[31:25] != 7'b0000001) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1030 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 =
	     (_theResult____h5281[6:0] == 7'b1100011) ?
	       _theResult____h5281[14:12] != 3'd0 &&
	       _theResult____h5281[14:12] != 3'b001 &&
	       _theResult____h5281[14:12] != 3'b100 &&
	       _theResult____h5281[14:12] != 3'b101 &&
	       _theResult____h5281[14:12] != 3'b110 &&
	       _theResult____h5281[14:12] != 3'b111 ||
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 :
	       _theResult____h5281[6:0] != 7'b1101111 &&
	       (_theResult____h5281[6:0] != 7'b1100111 ||
		_theResult____h5281[14:12] != 3'd0) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1196 =
	     ((_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011) &&
	      (_theResult____h5281[14:12] == 3'b001 ||
	       _theResult____h5281[14:12] == 3'b101)) ?
	       !_theResult____h5281[31] &&
	       _theResult____h5281[29:26] == 4'b0 &&
	       (_theResult____h5281[6:0] != 7'b0010011 ||
		!_theResult____h5281[25]) :
	       CASE_theResult__281_BITS_6_TO_0_0b10011_IF_ime_ETC__q15 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 =
	     (_theResult____h5281[6:0] == 7'b1100011) ?
	       (_theResult____h5281[14:12] == 3'd0 ||
		_theResult____h5281[14:12] == 3'b001 ||
		_theResult____h5281[14:12] == 3'b100 ||
		_theResult____h5281[14:12] == 3'b101 ||
		_theResult____h5281[14:12] == 3'b110 ||
		_theResult____h5281[14:12] == 3'b111) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 :
	       _theResult____h5281[6:0] != 7'b1101111 &&
	       _theResult____h5281[6:0] != 7'b1100111 &&
	       (_theResult____h5281[6:0] == 7'b0110011 &&
		_theResult____h5281[31:25] == 7'b0000001 ||
		IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1196) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204 =
	     (_theResult____h5281[6:0] == 7'b1100011) ?
	       (_theResult____h5281[14:12] == 3'd0 ||
		_theResult____h5281[14:12] == 3'b001 ||
		_theResult____h5281[14:12] == 3'b100 ||
		_theResult____h5281[14:12] == 3'b101 ||
		_theResult____h5281[14:12] == 3'b110 ||
		_theResult____h5281[14:12] == 3'b111) &&
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 :
	       _theResult____h5281[6:0] == 7'b1101111 ||
	       _theResult____h5281[6:0] == 7'b1100111 &&
	       _theResult____h5281[14:12] == 3'd0 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1621 =
	     ((_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011) &&
	      (_theResult____h5281[14:12] == 3'b001 ||
	       _theResult____h5281[14:12] == 3'b101)) ?
	       _theResult____h16436 :
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1825 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2046 =
	     (_theResult____h5281[6:0] == 7'b0000111) ? 5'd10 : 5'd9 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2047 =
	     (_theResult____h5281[6:0] == 7'b0100111) ? 5'd12 : 5'd11 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2078 =
	     ((_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011) &&
	      (_theResult____h5281[14:12] == 3'b001 ||
	       _theResult____h5281[14:12] == 3'b101)) ?
	       _theResult____h16436 :
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2113 =
	     { CASE_theResult__281_BITS_6_TO_0_0b100011_alu_o_ETC__q21,
	       CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22,
	       CASE_theResult__281_BITS_6_TO_0_0b11_csr_regfi_ETC__q23,
	       alu_outputs___1_trace_data_word5__h25523 } ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2114 =
	     { CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q24,
	       CASE_theResult__281_BITS_6_TO_0_0b1100111_alu__ETC__q25,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2113 } ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116 =
	     { CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27,
	       alu_outputs_trace_data_pc__h25734,
	       NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682,
	       alu_outputs___1_trace_data_instr__h25693,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2114 } ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2297 =
	     (_theResult____h5281[14:12] == 3'd0) ?
	       NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1392 &&
	       (_theResult____h5281[11:7] != 5'd0 ||
		_theResult____h5281[19:15] != 5'd0 ||
		_theResult____h5281[31:20] == 12'b0 ||
		_theResult____h5281[31:20] == 12'b000000000001 ||
		(rg_cur_priv != 2'b11 ||
		 _theResult____h5281[31:20] != 12'b001100000010) &&
		NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d2291) :
	       _theResult____h5281[14:12] != 3'b001 &&
	       _theResult____h5281[14:12] != 3'b101 &&
	       _theResult____h5281[14:12] != 3'b010 &&
	       _theResult____h5281[14:12] != 3'b110 &&
	       _theResult____h5281[14:12] != 3'b011 &&
	       _theResult____h5281[14:12] != 3'b111 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2304 =
	     ((_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011) &&
	      (_theResult____h5281[14:12] == 3'b001 ||
	       _theResult____h5281[14:12] == 3'b101)) ?
	       _theResult____h5281[31] ||
	       _theResult____h5281[29:26] != 4'b0 ||
	       _theResult____h5281[6:0] == 7'b0010011 &&
	       _theResult____h5281[25] :
	       CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q20 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744 =
	     rs1_val_bypassed__h5289 == rs2_val__h16240 ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746 =
	     (rs1_val_bypassed__h5289 ^ 32'h80000000) <
	     (rs2_val__h16240 ^ 32'h80000000) ;
  assign IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748 =
	     rs1_val_bypassed__h5289 < rs2_val__h16240 ;
  assign IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2049 =
	     (NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
	      (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148 ||
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185)) ?
	       (((_theResult____h5281[31:25] != 7'h61 ||
		  _theResult____h5281[24:20] != 5'd0) &&
		 (_theResult____h5281[31:25] != 7'h61 ||
		  _theResult____h5281[24:20] != 5'b00001) &&
		 _theResult____h5281[31:25] != 7'h71 &&
		 _theResult____h5281[31:25] != 7'h51 &&
		 (_theResult____h5281[31:25] != 7'h60 ||
		  _theResult____h5281[24:20] != 5'd0) &&
		 (_theResult____h5281[31:25] != 7'h60 ||
		  _theResult____h5281[24:20] != 5'b00001) &&
		 _theResult____h5281[31:25] != 7'h70 &&
		 _theResult____h5281[31:25] != 7'h50) ?
		  5'd8 :
		  5'd7) :
	       5'd14 ;
  assign IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2064 =
	     (NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
	      (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148 ||
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185)) ?
	       _theResult____h5281[11:7] :
	       5'd2 ;
  assign IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d380 =
	     (imem_c_rg_pc[1:0] != 2'b0 &&
	      imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d375) ?
	       { 16'b0,
		 IF_imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_ime_ETC___d378 } :
	       near_mem$imem_instr ;
  assign IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667 =
	     x_out_fbypass_rd__h8554 == _theResult____h5281[19:15] ;
  assign IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668 =
	     x_out_fbypass_rd__h8554 == _theResult____h5281[24:20] ;
  assign IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671 =
	     x_out_fbypass_rd__h8554 == _theResult____h5281[31:27] ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2421 =
	     csr_regfile$read_csr[31:0] | rs1_val__h34691 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d627 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b101) ?
	       instr__h15182 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
		 instr__h5279[15:13] == 3'b101) ?
		  instr__h15442 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d628 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b001 &&
	      csr_regfile$read_misa[3]) ?
	       instr__h15017 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d627 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d629 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
	      instr__h5279[15:13] == 3'b111) ?
	       instr__h14769 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d628 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d630 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
	      instr__h5279[15:13] == 3'b011) ?
	       instr__h14574 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d629 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d631 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b111) ?
	       instr__h14382 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d630 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d632 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b011 &&
	      csr_regfile$read_misa[5]) ?
	       instr__h14217 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d631 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d633 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:12] == 4'b1001 &&
	      instr__h5279[11:7] == 5'd0 &&
	      instr__h5279[6:2] == 5'd0) ?
	       instr__h14137 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d632 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d635 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:10] == 6'b100011 &&
	      instr__h5279[6:5] == 2'b01) ?
	       instr__h13663 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
		 instr__h5279[15:10] == 6'b100011 &&
		 instr__h5279[6:5] == 2'b0) ?
		  instr__h13799 :
		  IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d633) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d637 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:10] == 6'b100011 &&
	      instr__h5279[6:5] == 2'b11) ?
	       instr__h13391 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
		 instr__h5279[15:10] == 6'b100011 &&
		 instr__h5279[6:5] == 2'b10) ?
		  instr__h13527 :
		  IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d635) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d638 =
	     (csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d466 &&
	      instr__h5279[6:2] != 5'd0) ?
	       instr__h13296 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d637 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d639 =
	     (csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d460 &&
	      instr__h5279[6:2] != 5'd0) ?
	       instr__h13177 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d638 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d641 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b100 &&
	      instr__h5279[11:10] == 2'b01 &&
	      imm6__h11323 != 6'd0 &&
	      !instr__h5279[12]) ?
	       instr__h12882 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
		 instr__h5279[15:13] == 3'b100 &&
		 instr__h5279[11:10] == 2'b10) ?
		  instr__h12999 :
		  IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d639) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d642 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b100 &&
	      instr__h5279[11:10] == 2'b0 &&
	      imm6__h11323 != 6'd0 &&
	      !instr__h5279[12]) ?
	       instr__h12689 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d641 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d643 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b0 &&
	      instr__h5279[11:7] != 5'd0 &&
	      imm6__h11323 != 6'd0 &&
	      !instr__h5279[12]) ?
	       instr__h12496 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d642 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d645 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b011 &&
	      instr__h5279[11:7] == 5'd2 &&
	      nzimm10__h11947 != 10'd0) ?
	       instr__h12151 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
		 instr__h5279[15:13] == 3'b0 &&
		 nzimm10__h12162 != 10'd0) ?
		  instr__h12323 :
		  IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d643) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d646 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b0 &&
	      instr__h5279[11:7] != 5'd0 &&
	      imm6__h11323 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b0 &&
	      instr__h5279[11:7] == 5'd0 &&
	      imm6__h11323 == 6'd0) ?
	       instr__h11714 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d645 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d647 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b011 &&
	      instr__h5279[11:7] != 5'd0 &&
	      instr__h5279[11:7] != 5'd2 &&
	      imm6__h11323 != 6'd0) ?
	       instr__h11585 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d646 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d649 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b111) ?
	       instr__h11063 :
	       ((csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
		 instr__h5279[15:13] == 3'b010 &&
		 instr__h5279[11:7] != 5'd0) ?
		  instr__h11401 :
		  IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d647) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d650 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b110) ?
	       instr__h10746 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d649 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d651 =
	     (csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d466 &&
	      instr__h5279[6:2] == 5'd0) ?
	       instr__h10681 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d650 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d652 =
	     (csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d460 &&
	      instr__h5279[6:2] == 5'd0) ?
	       instr__h10565 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d651 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d653 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b001) ?
	       instr__h10175 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d652 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d654 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b01 &&
	      instr__h5279[15:13] == 3'b101) ?
	       instr__h9832 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d653 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d655 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
	      instr__h5279[15:13] == 3'b110) ?
	       instr__h9603 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d654 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d656 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b0 &&
	      instr__h5279[15:13] == 3'b010) ?
	       instr__h9408 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d655 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d657 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[15:13] == 3'b110) ?
	       instr__h9216 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d656 ;
  assign IF_csr_regfilemav_csr_write_BIT_32_THEN_2_ELSE_0__q1 =
	     csr_regfile$mav_csr_write[32] ? 32'd2 : 32'd0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d381 =
	     (imem_c_rg_pc[1:0] == 2'b0 &&
	      imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h8938 :
	       IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_ime_ETC___d380 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1072 =
	     _theResult____h5281[14:12] == 3'd0 &&
	     (_theResult____h5281[6:0] != 7'b0110011 ||
	      !_theResult____h5281[30]) ||
	     _theResult____h5281[14:12] == 3'd0 &&
	     _theResult____h5281[6:0] == 7'b0110011 &&
	     _theResult____h5281[30] ||
	     CASE_theResult__281_BITS_14_TO_12_0b10_theResu_ETC__q13 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1122 =
	     _theResult____h5281[31:25] == 7'h0 ||
	     _theResult____h5281[31:25] == 7'h04 ||
	     _theResult____h5281[31:25] == 7'h08 ||
	     _theResult____h5281[31:25] == 7'h0C ||
	     _theResult____h5281[31:25] == 7'h2C &&
	     _theResult____h5281[24:20] == 5'd0 ||
	     _theResult____h5281[31:25] == 7'h10 && rm__h16210 == 3'b0 ||
	     _theResult____h5281[31:25] == 7'h10 &&
	     (rm__h16210 == 3'b001 || rm__h16210 == 3'b010) ||
	     _theResult____h5281[31:25] == 7'h14 && rm__h16210 == 3'b0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1131 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1122 ||
	     _theResult____h5281[31:25] == 7'h14 && rm__h16210 == 3'b001 ||
	     _theResult____h5281[31:25] == 7'h60 &&
	     _theResult____h5281[24:20] == 5'd0 ||
	     _theResult____h5281[31:25] == 7'h60 &&
	     _theResult____h5281[24:20] == 5'b00001 ||
	     _theResult____h5281[31:25] == 7'h70 &&
	     _theResult____h5281[24:20] == 5'd0 &&
	     rm__h16210 == 3'b0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1139 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1131 ||
	     _theResult____h5281[31:25] == 7'h50 &&
	     (rm__h16210 == 3'b010 || rm__h16210 == 3'b001 ||
	      rm__h16210 == 3'b0) ||
	     _theResult____h5281[31:25] == 7'h70 &&
	     _theResult____h5281[24:20] == 5'd0 &&
	     rm__h16210 == 3'b001 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1146 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1139 ||
	     _theResult____h5281[31:25] == 7'h68 &&
	     (_theResult____h5281[24:20] == 5'd0 ||
	      _theResult____h5281[24:20] == 5'b00001) ||
	     _theResult____h5281[31:25] == 7'h78 &&
	     _theResult____h5281[24:20] == 5'd0 &&
	     rm__h16210 == 3'b0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148 =
	     (_theResult____h5281[26:25] == 2'b0 ||
	      _theResult____h5281[26:25] == 2'b01) &&
	     (_theResult____h5281[6:0] == 7'b1000011 ||
	      _theResult____h5281[6:0] == 7'b1000111 ||
	      _theResult____h5281[6:0] == 7'b1001111 ||
	      _theResult____h5281[6:0] == 7'b1001011) ||
	     _theResult____h5281[6:0] == 7'b1010011 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1146 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1165 =
	     _theResult____h5281[31:25] == 7'b0000001 ||
	     _theResult____h5281[31:25] == 7'h05 ||
	     _theResult____h5281[31:25] == 7'b0001001 ||
	     _theResult____h5281[31:25] == 7'h0D ||
	     _theResult____h5281[31:25] == 7'h2D &&
	     _theResult____h5281[24:20] == 5'd0 ||
	     _theResult____h5281[31:25] == 7'h11 && rm__h16210 == 3'b0 ||
	     _theResult____h5281[31:25] == 7'h11 &&
	     (rm__h16210 == 3'b001 || rm__h16210 == 3'b010) ||
	     _theResult____h5281[31:25] == 7'h15 && rm__h16210 == 3'b0 ||
	     _theResult____h5281[31:25] == 7'h15 && rm__h16210 == 3'b001 ||
	     _theResult____h5281[31:25] == 7'h20 &&
	     _theResult____h5281[24:20] == 5'b00001 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1176 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1165 ||
	     _theResult____h5281[31:25] == 7'h21 &&
	     _theResult____h5281[24:20] == 5'd0 ||
	     _theResult____h5281[31:25] == 7'h51 && rm__h16210 == 3'b010 ||
	     _theResult____h5281[31:25] == 7'h51 &&
	     (rm__h16210 == 3'b001 || rm__h16210 == 3'b0) ||
	     _theResult____h5281[31:25] == 7'h71 &&
	     _theResult____h5281[24:20] == 5'd0 &&
	     rm__h16210 == 3'b001 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1182 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1176 ||
	     _theResult____h5281[31:25] == 7'h61 &&
	     (_theResult____h5281[24:20] == 5'd0 ||
	      _theResult____h5281[24:20] == 5'b00001) ||
	     _theResult____h5281[31:25] == 7'h69 &&
	     _theResult____h5281[24:20] == 5'd0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185 =
	     _theResult____h5281[6:0] == 7'b1010011 &&
	     (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1182 ||
	      _theResult____h5281[31:25] == 7'h69 &&
	      _theResult____h5281[24:20] == 5'b00001) ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1264 =
	     _theResult____h5281[14:12] == 3'd0 &&
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     (_theResult____h5281[31:28] == 4'b0 ||
	      _theResult____h5281[31:28] == 4'b1000) ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1277 =
	     _theResult____h5281[14:12] == 3'b001 &&
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     _theResult____h5281[31:20] == 12'b0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1292 =
	     _theResult____h5281[11:7] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     _theResult____h5281[31:25] == 7'b0001001 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1328 =
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	     _theResult____h5281[31:20] == 12'b000100000010 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1998 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1122 ||
	     _theResult____h5281[31:25] == 7'h14 && rm__h16210 == 3'b001 ||
	     _theResult____h5281[31:25] == 7'h68 &&
	     _theResult____h5281[24:20] == 5'd0 ||
	     _theResult____h5281[31:25] == 7'h68 &&
	     _theResult____h5281[24:20] == 5'b00001 ||
	     _theResult____h5281[31:25] == 7'h78 &&
	     _theResult____h5281[24:20] == 5'd0 &&
	     rm__h16210 == 3'b0 ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2042 =
	     _theResult____h5281[6:0] == 7'b1010011 &&
	     (_theResult____h5281[31:25] == 7'h69 &&
	      (_theResult____h5281[24:20] == 5'd0 ||
	       _theResult____h5281[24:20] == 5'b00001) ||
	      _theResult____h5281[31:25] == 7'h79 ||
	      _theResult____h5281[31:25] == 7'h68 &&
	      (_theResult____h5281[24:20] == 5'd0 ||
	       _theResult____h5281[24:20] == 5'b00001) ||
	      _theResult____h5281[31:25] == 7'h78) ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2123 =
	     { _theResult____h5281,
	       CASE_theResult__281_BITS_6_TO_0_0b1100011_0_0b_ETC__q30,
	       data_to_stage2_rd__h16060,
	       data_to_stage2_addr__h16061,
	       x_out_data_to_stage2_val1__h16078,
	       data_to_stage2_val2__h16063,
	       alu_outputs___1_fval1__h17665,
	       alu_outputs___1_fval2__h16631,
	       alu_outputs___1_fval3__h17667,
	       _theResult____h5281[6:0] != 7'b1100011 &&
	       _theResult____h5281[6:0] != 7'b1101111 &&
	       _theResult____h5281[6:0] != 7'b1100111 &&
	       _theResult____h5281[6:0] != 7'b0010011 &&
	       _theResult____h5281[6:0] != 7'b0110011 &&
	       _theResult____h5281[6:0] != 7'b0110111 &&
	       _theResult____h5281[6:0] != 7'b0010111 &&
	       _theResult____h5281[6:0] != 7'b0000011 &&
	       _theResult____h5281[6:0] != 7'b0100011 &&
	       _theResult____h5281[6:0] != 7'b0001111 &&
	       _theResult____h5281[6:0] != 7'b1110011 &&
	       _theResult____h5281[6:0] != 7'b0101111 &&
	       (_theResult____h5281[6:0] == 7'b0000111 ||
		_theResult____h5281[6:0] != 7'b0100111 &&
		NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d2019),
	       _theResult____h5281[6:0] == 7'b0100111,
	       NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
	       _0_OR_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d2034 &&
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2042,
	       rm__h16210,
	       IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2116 } ;
  assign IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2447 =
	     _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      _theResult____h5281[31:25] != 7'b0001001) &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1328 ;
  assign IF_imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_ime_ETC___d378 =
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ?
	       near_mem$imem_instr[31:16] :
	       (imem_c_rg_cache_b16[16] ? imem_c_rg_cache_b16[15:0] : 16'd0) ;
  assign IF_near_mem_imem_exc__00_THEN_near_mem_imem_ex_ETC___d2313 =
	     near_mem$imem_exc ?
	       { near_mem$imem_exc_code, imem_c_rg_tval } :
	       { alu_outputs_exc_code__h17692, trap_info_tval__h20031 } ;
  assign IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661 =
	     x_out_bypass_rd__h8367 == _theResult____h5281[19:15] ;
  assign IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663 =
	     x_out_bypass_rd__h8367 == _theResult____h5281[24:20] ;
  assign IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1948 =
	     { IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935,
	       stage2_rg_stage2[191:96],
	       CASE_stage2_rg_stage2_BITS_600_TO_598_0_stage2_ETC__q28 } ;
  assign IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939 =
	     stage2_rg_stage2[304] ?
	       { csr_regfile$mv_update_mstatus_fs,
		 output_stage2___1_data_to_stage3_frd_val__h7249 } :
	       stage2_rg_stage2[95:0] ;
  assign NOT_IF_NOT_stage1_rg_full_21_22_OR_NOT_near_me_ETC___d2250 =
	     x_out_next_pc__h15783[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h31495 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 =
	     cur_verbosity__h3661 > 4'd1 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019 =
	     _theResult____h5281[6:0] != 7'b1010011 ||
	     _theResult____h5281[31:25] != 7'b0000001 &&
	     _theResult____h5281[31:25] != 7'h05 &&
	     _theResult____h5281[31:25] != 7'b0001001 &&
	     _theResult____h5281[31:25] != 7'h0D &&
	     (_theResult____h5281[31:25] != 7'h2D ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h11 || rm__h16210 != 3'b0) &&
	     (_theResult____h5281[31:25] != 7'h11 || rm__h16210 != 3'b001) &&
	     (_theResult____h5281[31:25] != 7'h11 || rm__h16210 != 3'b010) &&
	     (_theResult____h5281[31:25] != 7'h15 || rm__h16210 != 3'b0) &&
	     (_theResult____h5281[31:25] != 7'h15 || rm__h16210 != 3'b001) &&
	     (_theResult____h5281[31:25] != 7'h20 ||
	      _theResult____h5281[24:20] != 5'b00001) &&
	     (_theResult____h5281[31:25] != 7'h21 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h51 || rm__h16210 != 3'b010) &&
	     (_theResult____h5281[31:25] != 7'h51 || rm__h16210 != 3'b001) &&
	     (_theResult____h5281[31:25] != 7'h51 || rm__h16210 != 3'b0) &&
	     (_theResult____h5281[31:25] != 7'h71 ||
	      _theResult____h5281[24:20] != 5'd0 ||
	      rm__h16210 != 3'b001) &&
	     (_theResult____h5281[31:25] != 7'h61 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h61 ||
	      _theResult____h5281[24:20] != 5'b00001) &&
	     (_theResult____h5281[31:25] != 7'h69 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h69 ||
	      _theResult____h5281[24:20] != 5'b00001) ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1380 =
	     _theResult____h5281[14:12] != 3'd0 ||
	     _theResult____h5281[11:7] != 5'd0 ||
	     _theResult____h5281[19:15] != 5'd0 ||
	     _theResult____h5281[31:28] != 4'b0 &&
	     _theResult____h5281[31:28] != 4'b1000 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1387 =
	     _theResult____h5281[14:12] != 3'b001 ||
	     _theResult____h5281[11:7] != 5'd0 ||
	     _theResult____h5281[19:15] != 5'd0 ||
	     _theResult____h5281[31:20] != 12'b0 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1392 =
	     _theResult____h5281[11:7] != 5'd0 ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     _theResult____h5281[31:25] != 7'b0001001 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798 =
	     (_theResult____h5281[14:12] != 3'd0 ||
	      _theResult____h5281[6:0] == 7'b0110011 &&
	      _theResult____h5281[30]) &&
	     (_theResult____h5281[14:12] != 3'd0 ||
	      _theResult____h5281[6:0] != 7'b0110011 ||
	      !_theResult____h5281[30]) &&
	     CASE_theResult__281_BITS_14_TO_12_0b10_NOT_the_ETC__q10 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850 =
	     (_theResult____h5281[31:27] != 5'b00010 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     _theResult____h5281[31:27] != 5'b00011 &&
	     _theResult____h5281[31:27] != 5'b0 &&
	     _theResult____h5281[31:27] != 5'b00001 &&
	     _theResult____h5281[31:27] != 5'b01100 &&
	     _theResult____h5281[31:27] != 5'b01000 &&
	     _theResult____h5281[31:27] != 5'b00100 &&
	     _theResult____h5281[31:27] != 5'b10000 &&
	     _theResult____h5281[31:27] != 5'b11000 &&
	     _theResult____h5281[31:27] != 5'b10100 &&
	     _theResult____h5281[31:27] != 5'b11100 ||
	     _theResult____h5281[14:12] != 3'b010 ;
  assign NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958 =
	     (_theResult____h5281[26:25] != 2'b0 &&
	      _theResult____h5281[26:25] != 2'b01 ||
	      _theResult____h5281[6:0] != 7'b1000011 &&
	      _theResult____h5281[6:0] != 7'b1000111 &&
	      _theResult____h5281[6:0] != 7'b1001111 &&
	      _theResult____h5281[6:0] != 7'b1001011) &&
	     (_theResult____h5281[6:0] != 7'b1010011 ||
	      _theResult____h5281[31:25] != 7'h0 &&
	      _theResult____h5281[31:25] != 7'h04 &&
	      _theResult____h5281[31:25] != 7'h08 &&
	      _theResult____h5281[31:25] != 7'h0C &&
	      (_theResult____h5281[31:25] != 7'h2C ||
	       _theResult____h5281[24:20] != 5'd0) &&
	      (_theResult____h5281[31:25] != 7'h10 || rm__h16210 != 3'b0) &&
	      (_theResult____h5281[31:25] != 7'h10 || rm__h16210 != 3'b001) &&
	      (_theResult____h5281[31:25] != 7'h10 || rm__h16210 != 3'b010) &&
	      (_theResult____h5281[31:25] != 7'h14 || rm__h16210 != 3'b0) &&
	      (_theResult____h5281[31:25] != 7'h14 || rm__h16210 != 3'b001) &&
	      (_theResult____h5281[31:25] != 7'h60 ||
	       _theResult____h5281[24:20] != 5'd0) &&
	      (_theResult____h5281[31:25] != 7'h60 ||
	       _theResult____h5281[24:20] != 5'b00001) &&
	      (_theResult____h5281[31:25] != 7'h70 ||
	       _theResult____h5281[24:20] != 5'd0 ||
	       rm__h16210 != 3'b0) &&
	      (_theResult____h5281[31:25] != 7'h50 || rm__h16210 != 3'b010) &&
	      (_theResult____h5281[31:25] != 7'h50 || rm__h16210 != 3'b001) &&
	      (_theResult____h5281[31:25] != 7'h50 || rm__h16210 != 3'b0) &&
	      (_theResult____h5281[31:25] != 7'h70 ||
	       _theResult____h5281[24:20] != 5'd0 ||
	       rm__h16210 != 3'b001) &&
	      (_theResult____h5281[31:25] != 7'h68 ||
	       _theResult____h5281[24:20] != 5'd0) &&
	      (_theResult____h5281[31:25] != 7'h68 ||
	       _theResult____h5281[24:20] != 5'b00001) &&
	      (_theResult____h5281[31:25] != 7'h78 ||
	       _theResult____h5281[24:20] != 5'd0 ||
	       rm__h16210 != 3'b0)) ;
  assign NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1854 =
	     !csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 ||
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     stage1_rg_full &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d1851 ;
  assign NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1868 =
	     NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d1854 ||
	     (csr_regfile_interrupt_pending_rg_cur_priv_0_84_ETC___d1856 ||
	      stage2_rg_stage2[600:598] != 3'd0 &&
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 &&
	      stage2_rg_full ||
	      NOT_imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_c_ETC___d1865) &&
	     stage1_rg_full ;
  assign NOT_csr_regfile_csr_mip_read__830_EQ_rg_prev_m_ETC___d2270 =
	     !csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 ||
	     csr_regfile_interrupt_pending_rg_cur_priv_0_84_ETC___d1856 ||
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 &&
	     stage2_rg_full ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2217 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2212) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2214) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2219 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970) &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 ||
	      !stage2_rg_full) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2234 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2229) &&
	     (!stage1_rg_full ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2231) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2265 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970) &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 ||
	      !stage2_rg_full) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2281 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 =
	     csr_regfile$read_mstatus[14:13] != 2'h0 &&
	     ((_theResult____h5281[14:12] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		_theResult____h5281[14:12] != 3'b101 &&
		_theResult____h5281[14:12] != 3'b110) ;
  assign NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d2019 =
	     NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
	     ((_theResult____h5281[26:25] == 2'b0 ||
	       _theResult____h5281[26:25] == 2'b01) &&
	      (_theResult____h5281[6:0] == 7'b1000011 ||
	       _theResult____h5281[6:0] == 7'b1000111 ||
	       _theResult____h5281[6:0] == 7'b1001111 ||
	       _theResult____h5281[6:0] == 7'b1001011) ||
	      _theResult____h5281[6:0] == 7'b1010011 &&
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1998 ||
	      _theResult____h5281[6:0] == 7'b1010011 &&
	      (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1165 ||
	       _theResult____h5281[31:25] == 7'h21 &&
	       _theResult____h5281[24:20] == 5'd0 ||
	       _theResult____h5281[31:25] == 7'h69 &&
	       _theResult____h5281[24:20] == 5'd0 ||
	       _theResult____h5281[31:25] == 7'h69 &&
	       _theResult____h5281[24:20] == 5'b00001)) &&
	     (_theResult____h5281[31:25] != 7'h61 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h61 ||
	      _theResult____h5281[24:20] != 5'b00001) &&
	     _theResult____h5281[31:25] != 7'h71 &&
	     _theResult____h5281[31:25] != 7'h51 &&
	     (_theResult____h5281[31:25] != 7'h60 ||
	      _theResult____h5281[24:20] != 5'd0) &&
	     (_theResult____h5281[31:25] != 7'h60 ||
	      _theResult____h5281[24:20] != 5'b00001) &&
	     _theResult____h5281[31:25] != 7'h70 &&
	     _theResult____h5281[31:25] != 7'h50 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d2237 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d365 =
	     imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 &&
	     near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330 &&
	     imem_c_rg_cache_b16[16] &&
	     imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] == 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d365 ||
	     imem_c_rg_pc[1:0] == 2'b0 &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682 ||
	     imem_c_rg_pc[1:0] != 2'b0 &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d375 ||
	     imem_c_rg_pc[1:0] == 2'b0 &&
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign NOT_imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_c_ETC___d1865 =
	     (!imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 ||
	      !near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] != 2'b11) &&
	     (!imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] == 2'b11) ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1235 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     (_theResult____h5281[14:12] == 3'b001 ||
	      _theResult____h5281[14:12] == 3'b101) ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1249 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     (_theResult____h5281[14:12] == 3'b010 ||
	      _theResult____h5281[14:12] == 3'b110 ||
	      _theResult____h5281[14:12] == 3'b011 ||
	      _theResult____h5281[14:12] == 3'b111) ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1295 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1292 ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1332 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1329 ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1353 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1350 ;
  assign NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d2441 =
	     !near_mem$imem_exc && _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     _theResult____h5281[31:20] == 12'b001100000010 ;
  assign NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1876 =
	     !near_mem$imem_valid ||
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1885 =
	     !near_mem$imem_valid ||
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2212 =
	     !near_mem$imem_valid ||
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d2214 =
	     !near_mem$imem_valid ||
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1329 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      _theResult____h5281[31:25] != 7'b0001001) &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1328 ;
  assign NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1350 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      _theResult____h5281[31:25] != 7'b0001001) &&
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1348 ;
  assign NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1424 =
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[21]) &&
	     (rg_cur_priv != 2'b0 || !csr_regfile$read_misa[13]) ||
	     _theResult____h5281[31:20] != 12'b000100000101 ;
  assign NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d2291 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	      _theResult____h5281[31:20] != 12'b000100000010) &&
	     NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1424 ;
  assign NOT_rg_next_pc_471_BITS_1_TO_0_472_EQ_0b0_473__ETC___d2480 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h41328 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_soc_map_m_pc_reset_value__806_BITS_1_TO_0__ETC___d1820 =
	     soc_map$m_pc_reset_value[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h22922 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_stage1_rg_full_21_22_OR_near_mem_imem_vali_ETC___d2316 =
	     !stage1_rg_full ||
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 ;
  assign NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 =
	     (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287 ||
	      !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661) &&
	     (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287 ||
	      !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663) &&
	     (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 ||
	      !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667) &&
	     (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 ||
	      !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668) &&
	     (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 ||
	      !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671) ;
  assign NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1448 =
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     (_theResult____h5281[6:0] == 7'b1100011 ||
	      _theResult____h5281[6:0] == 7'b1101111 ||
	      _theResult____h5281[6:0] == 7'b1100111 ||
	      (_theResult____h5281[6:0] != 7'b0110011 ||
	       _theResult____h5281[31:25] != 7'b0000001) &&
	      (_theResult____h5281[6:0] == 7'b0010011 ||
	       _theResult____h5281[6:0] == 7'b0110011 ||
	       _theResult____h5281[6:0] == 7'b0110111 ||
	       _theResult____h5281[6:0] == 7'b0010111)) ;
  assign NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 =
	     !stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287 ||
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661 &&
	     !IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663 ;
  assign NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 =
	     !stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 ||
	     !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667 &&
	     !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668 &&
	     !IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671 ;
  assign NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135 =
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_ne_ETC__q2 ;
  assign NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143 =
	     (stage2_rg_stage2[600:598] == 3'd1 ||
	      stage2_rg_stage2[600:598] == 3'd4 ||
	      stage2_rg_stage2[600:598] == 3'd2) &&
	     near_mem$dmem_valid &&
	     near_mem$dmem_exc ;
  assign NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d164 =
	     (stage2_rg_stage2[600:598] != 3'd1 &&
	      stage2_rg_stage2[600:598] != 3'd4 &&
	      stage2_rg_stage2[600:598] != 3'd2 ||
	      !near_mem$dmem_valid ||
	      !near_mem$dmem_exc) &&
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162 ;
  assign NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d279 =
	     stage2_rg_stage2[600:598] != 3'd2 &&
	     ((stage2_rg_stage2[600:598] == 3'd3) ?
		!stage2_mbox$valid :
		!stage2_rg_stage2[304] && !stage2_fbox$valid) ;
  assign NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d725 =
	     stage2_rg_stage2[600:598] != 3'd2 &&
	     ((stage2_rg_stage2[600:598] == 3'd3) ?
		stage2_mbox$valid :
		!stage2_rg_stage2[304] && stage2_fbox$valid) ;
  assign SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446 =
	     { {9{offset__h9779[11]}}, offset__h9779 } ;
  assign SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475 =
	     { {4{offset__h10690[8]}}, offset__h10690 } ;
  assign SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1556 =
	     { {20{theResult__281_BITS_31_TO_20__q18[11]}},
	       theResult__281_BITS_31_TO_20__q18 } ;
  assign _0_OR_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d2034 =
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1146 ||
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1182 ||
	     _theResult____h5281[31:25] == 7'h69 &&
	     _theResult____h5281[24:20] == 5'b00001 ;
  assign _theResult_____1_fst__h18601 =
	     (_theResult____h5281[14:12] == 3'd0 &&
	      _theResult____h5281[6:0] == 7'b0110011 &&
	      _theResult____h5281[30]) ?
	       rd_val___1__h18597 :
	       _theResult_____1_fst__h18608 ;
  assign _theResult_____1_fst__h18636 =
	     rs1_val_bypassed__h5289 & _theResult___snd_snd__h20931 ;
  assign _theResult____h16436 =
	     (_theResult____h5281[14:12] == 3'b001) ?
	       rd_val__h20831 :
	       (_theResult____h5281[30] ? rd_val__h20905 : rd_val__h20883) ;
  assign _theResult____h33054 =
	     (delta_CPI_instrs__h33053 == 64'd0) ?
	       delta_CPI_instrs___1__h33098 :
	       delta_CPI_instrs__h33053 ;
  assign _theResult____h5281 = x_out_data_to_stage2_instr__h16074 ;
  assign _theResult___snd_fst_rd_val__h8536 =
	     stage2_rg_stage2[304] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[496:433] ;
  assign _theResult___snd_snd__h20931 =
	     (_theResult____h5281[6:0] == 7'b0010011) ?
	       SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1556 :
	       rs2_val__h16240 ;
  assign addr_of_b32___1__h23028 = addr_of_b32__h22922 + 32'd4 ;
  assign addr_of_b32___1__h31601 = addr_of_b32__h31495 + 32'd4 ;
  assign addr_of_b32___1__h41434 = addr_of_b32__h41328 + 32'd4 ;
  assign addr_of_b32__h22922 = { soc_map$m_pc_reset_value[31:2], 2'd0 } ;
  assign addr_of_b32__h31495 = { x_out_next_pc__h15783[31:2], 2'd0 } ;
  assign addr_of_b32__h41328 = { rg_next_pc[31:2], 2'd0 } ;
  assign alu_outputs___1_addr__h16267 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 ?
	       branch_target__h16244 :
	       alu_outputs___1_trace_data_pc__h25691 ;
  assign alu_outputs___1_addr__h16298 =
	     imem_c_rg_pc +
	     { {11{theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q7[20]}},
	       theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q7 } ;
  assign alu_outputs___1_addr__h16335 = { eaddr__h16560[31:1], 1'd0 } ;
  assign alu_outputs___1_exc_code__h16923 =
	     (_theResult____h5281[14:12] == 3'd0) ?
	       (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1292 ?
		  4'd2 :
		  ((_theResult____h5281[11:7] == 5'd0 &&
		    _theResult____h5281[19:15] == 5'd0) ?
		     CASE_theResult__281_BITS_31_TO_20_0b0_CASE_rg__ETC__q17 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_fval1__h17665 = x_out_data_to_stage2_fval1__h16080 ;
  assign alu_outputs___1_fval2__h16631 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1651 &&
	      IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668) ?
	       x_out_fbypass_rd_val__h8555 :
	       rd_val__h15690 ;
  assign alu_outputs___1_fval3__h17667 = x_out_data_to_stage2_fval3__h16082 ;
  assign alu_outputs___1_trace_data_instr__h25693 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350 ?
	       { 16'd0, instr__h5279[15:0] } :
	       _theResult____h5281 ;
  assign alu_outputs___1_trace_data_pc__h25691 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350 ?
	       next_pc___1__h20228 :
	       next_pc__h20226 ;
  assign alu_outputs___1_trace_data_word1__h25519 =
	     { 29'd0, _theResult____h5281[14:12] } ;
  assign alu_outputs___1_trace_data_word2__h25520 = rs2_val__h16240 ;
  assign alu_outputs___1_trace_data_word2__h25696 =
	     { 27'd0, csr_regfile$read_fflags } ;
  assign alu_outputs___1_trace_data_word3__h25488 = { 32'd0, eaddr__h16560 } ;
  assign alu_outputs___1_trace_data_word3__h25521 = { 32'd0, eaddr__h16609 } ;
  assign alu_outputs___1_trace_data_word3__h25584 =
	     { 32'd0, rs1_val_bypassed__h5289 } ;
  assign alu_outputs___1_trace_data_word5__h25523 =
	     alu_outputs___1_fval2__h16631 ;
  assign alu_outputs___1_val1__h16927 =
	     _theResult____h5281[14] ?
	       { 27'd0, _theResult____h5281[19:15] } :
	       rs1_val_bypassed__h5289 ;
  assign alu_outputs___1_val1__h16957 =
	     { 25'd0, _theResult____h5281[31:25] } ;
  assign branch_target__h16244 =
	     imem_c_rg_pc +
	     { {19{theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q6[12]}},
	       theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q6 } ;
  assign cpi__h33056 = x__h33055 / 64'd10 ;
  assign cpifrac__h33057 = x__h33055 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_response_get__785_ETC___d1800 =
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 =
	     csr_regfile$csr_mip_read == rg_prev_mip ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1888 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     !csr_regfile$interrupt_pending[4] &&
	     !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1885) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1876) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1972 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1972 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 ||
	      !stage2_rg_full) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2146 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     (_theResult____h5281[6:0] == 7'b0000011 ||
	      _theResult____h5281[6:0] == 7'b0000111 ||
	      _theResult____h5281[6:0] == 7'b0100011 ||
	      _theResult____h5281[6:0] == 7'b0100111 ||
	      _theResult____h5281[6:0] == 7'b0101111) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2190 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     _theResult____h5281[6:0] != 7'b0000011 &&
	     _theResult____h5281[6:0] != 7'b0000111 &&
	     _theResult____h5281[6:0] != 7'b0100011 &&
	     _theResult____h5281[6:0] != 7'b0100111 &&
	     _theResult____h5281[6:0] != 7'b0101111 &&
	     _theResult____h5281[6:0] != 7'b1100011 &&
	     _theResult____h5281[6:0] != 7'b1101111 &&
	     _theResult____h5281[6:0] != 7'b1100111 &&
	     _theResult____h5281[6:0] != 7'b0010011 &&
	     _theResult____h5281[6:0] != 7'b0110011 &&
	     _theResult____h5281[6:0] != 7'b0110111 &&
	     _theResult____h5281[6:0] != 7'b0010111 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2201 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1448 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2205 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1477 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2207 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     _theResult____h5281[6:0] == 7'b0110011 &&
	     _theResult____h5281[31:25] == 7'b0000001 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2209 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     _theResult____h5281[6:0] == 7'b0101111 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2211 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1520 ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2217 &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2219 &&
	      near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 ||
	      !stage1_rg_full) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2240 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2234 &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2219 &&
	      NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d2237 ||
	      !stage1_rg_full) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2259 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2268 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2217 &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2265 &&
	      near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 ||
	      !stage1_rg_full) ;
  assign csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2359 =
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign csr_regfile_csr_trap_actions_326_BITS_65_TO_2__ETC___d2339 =
	     { csr_regfile$csr_trap_actions[65:2],
	       x__h32937,
	       rg_trap_interrupt ?
		 96'h00000000AAAAAAAAAAAAAAAA :
		 { rg_trap_info[31:0], rg_trap_trace_data[63:0] } } ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_0_84_ETC___d1856 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d2346 =
	     delta_CPI_cycles__h33052 * 64'd10 ;
  assign csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d460 =
	     csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	     instr__h5279[15:12] == 4'b1000 &&
	     instr__h5279[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__7_BIT_2_61_AND_IF_NOT_i_ETC___d466 =
	     csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	     instr__h5279[15:12] == 4'b1001 &&
	     instr__h5279[11:7] != 5'd0 ;
  assign csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866 =
	     csr_regfile$read_mstatus[14:13] == 2'h0 ||
	     ((_theResult____h5281[14:12] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		_theResult____h5281[14:12] == 3'b101 ||
		_theResult____h5281[14:12] == 3'b110) ;
  assign cur_verbosity__h3661 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h16061 = x_out_data_to_stage2_addr__h16077 ;
  assign data_to_stage2_rd__h16060 = x_out_data_to_stage2_rd__h16076 ;
  assign data_to_stage2_val2__h16063 = x_out_data_to_stage2_val2__h16079 ;
  assign delta_CPI_cycles__h33052 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h33098 = delta_CPI_instrs__h33053 + 64'd1 ;
  assign delta_CPI_instrs__h33053 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h16560 =
	     rs1_val_bypassed__h5289 +
	     SEXT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d1556 ;
  assign eaddr__h16609 =
	     rs1_val_bypassed__h5289 +
	     { {20{theResult__281_BITS_31_TO_25_CONCAT_theResult__ETC__q8[11]}},
	       theResult__281_BITS_31_TO_25_CONCAT_theResult__ETC__q8 } ;
  assign fall_through_pc__h15768 =
	     imem_c_rg_pc +
	     (NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682 ?
		32'd4 :
		32'd2) ;
  assign imem_c_rg_cache_b16_BITS_15_TO_0__q5 = imem_c_rg_cache_b16[15:0] ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2229 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d2231 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350 =
	     (imem_c_rg_pc[1:0] == 2'b0 ||
	      !imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 ||
	      !near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330 ||
	      !imem_c_rg_cache_b16[16] ||
	      imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] != 2'b11) &&
	     (imem_c_rg_pc[1:0] != 2'b0 ||
	      !imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350 &&
	     (imem_c_rg_pc[1:0] == 2'b0 ||
	      (!imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	       near_mem$imem_instr[17:16] == 2'b11) &&
	      (!imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 ||
	       !imem_c_rg_cache_b16[16] ||
	       imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] == 2'b11)) &&
	     (imem_c_rg_pc[1:0] != 2'b0 ||
	      !imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_me_ETC___d1794 =
	     imem_c_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     !imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 ||
	     near_mem$imem_instr[17:16] != 2'b11 ;
  assign imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d1851 =
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 &&
	     (near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330 &&
	      imem_c_rg_cache_b16[16] &&
	      imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] == 2'b11 ||
	      imem_c_rg_cache_b16[16] &&
	      imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] != 2'b11) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1825 ;
  assign imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 =
	     imem_c_rg_pc[31:2] == imem_c_rg_cache_addr[31:2] ;
  assign imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 =
	     imem_c_rg_pc[31:2] == near_mem$imem_pc[31:2] ;
  assign imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d375 =
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_p_ETC___d13 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     imem_c_rg_pc_BITS_31_TO_2_0_EQ_imem_c_rg_cache_ETC___d326 &&
	     imem_c_rg_cache_b16[16] &&
	     imem_c_rg_cache_b16_BITS_15_TO_0__q5[1:0] != 2'b11 ;
  assign imm12__h11325 = { {6{imm6__h11323[5]}}, imm6__h11323 } ;
  assign imm12__h11949 = { {2{nzimm10__h11947[9]}}, nzimm10__h11947 } ;
  assign imm12__h12164 = { 2'd0, nzimm10__h12162 } ;
  assign imm12__h12360 = { 7'b0, instr__h5279[6:2] } ;
  assign imm12__h12705 = { 7'b0100000, instr__h5279[6:2] } ;
  assign imm12__h15018 = { 3'd0, offset__h14947 } ;
  assign imm12__h9072 = { 4'd0, offset__h8806 } ;
  assign imm12__h9409 = { 5'd0, offset__h9351 } ;
  assign imm20__h11453 = { {14{imm6__h11323[5]}}, imm6__h11323 } ;
  assign imm6__h11323 = { instr__h5279[12], instr__h5279[6:2] } ;
  assign instr___1__h8760 =
	     (csr_regfile$read_misa[2] && instr__h5279[1:0] == 2'b10 &&
	      instr__h5279[11:7] != 5'd0 &&
	      instr__h5279[15:13] == 3'b010) ?
	       instr__h9071 :
	       IF_csr_regfile_read_misa__7_BIT_2_61_AND_IF_NO_ETC___d657 ;
  assign instr__h10175 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[20],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[10:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[11],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[19:12],
	       12'd239 } ;
  assign instr__h10565 = { 12'd0, instr__h5279[11:7], 15'd103 } ;
  assign instr__h10681 = { 12'd0, instr__h5279[11:7], 15'd231 } ;
  assign instr__h10746 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[12],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[10:5],
	       5'd0,
	       rs1__h9410,
	       3'b0,
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[4:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[11],
	       7'b1100011 } ;
  assign instr__h11063 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[12],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[10:5],
	       5'd0,
	       rs1__h9410,
	       3'b001,
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[4:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d475[11],
	       7'b1100011 } ;
  assign instr__h11401 =
	     { imm12__h11325, 8'd0, instr__h5279[11:7], 7'b0010011 } ;
  assign instr__h11585 = { imm20__h11453, instr__h5279[11:7], 7'b0110111 } ;
  assign instr__h11714 =
	     { imm12__h11325,
	       instr__h5279[11:7],
	       3'b0,
	       instr__h5279[11:7],
	       7'b0010011 } ;
  assign instr__h12151 =
	     { imm12__h11949,
	       instr__h5279[11:7],
	       3'b0,
	       instr__h5279[11:7],
	       7'b0010011 } ;
  assign instr__h12323 = { imm12__h12164, 8'd16, rd__h9411, 7'b0010011 } ;
  assign instr__h12496 =
	     { imm12__h12360,
	       instr__h5279[11:7],
	       3'b001,
	       instr__h5279[11:7],
	       7'b0010011 } ;
  assign instr__h12689 =
	     { imm12__h12360, rs1__h9410, 3'b101, rs1__h9410, 7'b0010011 } ;
  assign instr__h12882 =
	     { imm12__h12705, rs1__h9410, 3'b101, rs1__h9410, 7'b0010011 } ;
  assign instr__h12999 =
	     { imm12__h11325, rs1__h9410, 3'b111, rs1__h9410, 7'b0010011 } ;
  assign instr__h13177 =
	     { 7'b0,
	       instr__h5279[6:2],
	       8'd0,
	       instr__h5279[11:7],
	       7'b0110011 } ;
  assign instr__h13296 =
	     { 7'b0,
	       instr__h5279[6:2],
	       instr__h5279[11:7],
	       3'b0,
	       instr__h5279[11:7],
	       7'b0110011 } ;
  assign instr__h13391 =
	     { 7'b0, rd__h9411, rs1__h9410, 3'b111, rs1__h9410, 7'b0110011 } ;
  assign instr__h13527 =
	     { 7'b0, rd__h9411, rs1__h9410, 3'b110, rs1__h9410, 7'b0110011 } ;
  assign instr__h13663 =
	     { 7'b0, rd__h9411, rs1__h9410, 3'b100, rs1__h9410, 7'b0110011 } ;
  assign instr__h13799 =
	     { 7'b0100000,
	       rd__h9411,
	       rs1__h9410,
	       3'b0,
	       rs1__h9410,
	       7'b0110011 } ;
  assign instr__h14137 =
	     { 12'b000000000001,
	       instr__h5279[11:7],
	       3'b0,
	       instr__h5279[11:7],
	       7'b1110011 } ;
  assign instr__h14217 =
	     { imm12__h9072, 8'd18, instr__h5279[11:7], 7'b0000111 } ;
  assign instr__h14382 =
	     { 4'd0,
	       instr__h5279[8:7],
	       instr__h5279[12],
	       instr__h5279[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h9340,
	       7'b0100111 } ;
  assign instr__h14574 =
	     { imm12__h9409, rs1__h9410, 3'b010, rd__h9411, 7'b0000111 } ;
  assign instr__h14769 =
	     { 5'd0,
	       instr__h5279[5],
	       instr__h5279[12],
	       rd__h9411,
	       rs1__h9410,
	       3'b010,
	       offset_BITS_4_TO_0___h9771,
	       7'b0100111 } ;
  assign instr__h15017 =
	     { imm12__h15018, 8'd19, instr__h5279[11:7], 7'b0000111 } ;
  assign instr__h15182 =
	     { 3'd0,
	       instr__h5279[9:7],
	       instr__h5279[12],
	       instr__h5279[6:2],
	       8'd19,
	       offset_BITS_4_TO_0___h15567,
	       7'b0100111 } ;
  assign instr__h15442 =
	     { 4'd0,
	       instr__h5279[6:5],
	       instr__h5279[12],
	       rd__h9411,
	       rs1__h9410,
	       3'b011,
	       offset_BITS_4_TO_0___h15567,
	       7'b0100111 } ;
  assign instr__h5279 =
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d365 ?
	       instr_out___1__h8906 :
	       IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c__ETC___d381 ;
  assign instr__h9071 =
	     { imm12__h9072, 8'd18, instr__h5279[11:7], 7'b0000011 } ;
  assign instr__h9216 =
	     { 4'd0,
	       instr__h5279[8:7],
	       instr__h5279[12],
	       instr__h5279[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h9340,
	       7'b0100011 } ;
  assign instr__h9408 =
	     { imm12__h9409, rs1__h9410, 3'b010, rd__h9411, 7'b0000011 } ;
  assign instr__h9603 =
	     { 5'd0,
	       instr__h5279[5],
	       instr__h5279[12],
	       rd__h9411,
	       rs1__h9410,
	       3'b010,
	       offset_BITS_4_TO_0___h9771,
	       7'b0100011 } ;
  assign instr__h9832 =
	     { SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[20],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[10:1],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[11],
	       SEXT_IF_NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AN_ETC___d446[19:12],
	       12'd111 } ;
  assign instr_out___1__h8906 =
	     { near_mem$imem_instr[15:0], imem_c_rg_cache_b16[15:0] } ;
  assign instr_out___1__h8938 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_RDY_server_reset_request_put__761_AND_ETC___d1773 =
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N &&
	     f_trace_data$FULL_N ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1682 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1685 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1227 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1688 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1238 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1691 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1252 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1694 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1269 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1697 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1282 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1700 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1298 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1703 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1312 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1708 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1707 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1713 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1712 ;
  assign near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1716 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1439 ;
  assign near_mem_imem_exc__00_OR_NOT_rg_cur_priv_0_EQ__ETC___d1321 =
	     near_mem$imem_exc ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     _theResult____h5281[31:25] != 7'b0001001 ;
  assign near_mem_imem_pc__1_EQ_imem_c_rg_pc_PLUS_2_29___d330 =
	     near_mem$imem_pc == next_pc___1__h20228 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1221 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1228 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1227 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1240 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1239 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1254 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1253 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1271 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1270 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1284 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1283 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1300 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1299 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1314 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1313 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1338 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1337 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1359 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1358 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1441 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1439 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1450 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1448 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1463 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     (_theResult____h5281[6:0] == 7'b0000011 ||
	      _theResult____h5281[6:0] == 7'b0000111) ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1479 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1477 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1483 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     _theResult____h5281[6:0] == 7'b0110011 &&
	     _theResult____h5281[31:25] == 7'b0000001 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1487 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     _theResult____h5281[6:0] == 7'b0101111 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1522 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1520 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1683 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1682 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1686 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1685 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1689 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1688 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1692 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1691 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1695 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1694 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1698 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1697 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1701 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1700 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1704 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1703 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1709 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1708 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1714 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1713 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1717 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     near_mem_imem_exc__00_OR_IF_IF_imem_c_rg_pc_BI_ETC___d1716 ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d690 &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d697 &&
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 =
	     near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     (near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) ;
  assign next_pc___1__h20228 = imem_c_rg_pc + 32'd2 ;
  assign next_pc__h20226 = imem_c_rg_pc + 32'd4 ;
  assign nzimm10__h11947 =
	     { instr__h5279[12],
	       instr__h5279[4:3],
	       instr__h5279[5],
	       instr__h5279[2],
	       instr__h5279[6],
	       4'b0 } ;
  assign nzimm10__h12162 =
	     { instr__h5279[10:7],
	       instr__h5279[12:11],
	       instr__h5279[5],
	       instr__h5279[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h15567 = { instr__h5279[11:10], 3'b0 } ;
  assign offset_BITS_4_TO_0___h9340 = { instr__h5279[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h9771 =
	     { instr__h5279[11:10], instr__h5279[6], 2'b0 } ;
  assign offset__h10690 =
	     { instr__h5279[12],
	       instr__h5279[6:5],
	       instr__h5279[2],
	       instr__h5279[11:10],
	       instr__h5279[4:3],
	       1'b0 } ;
  assign offset__h14947 =
	     { instr__h5279[4:2],
	       instr__h5279[12],
	       instr__h5279[6:5],
	       3'b0 } ;
  assign offset__h8806 =
	     { instr__h5279[3:2],
	       instr__h5279[12],
	       instr__h5279[6:4],
	       2'b0 } ;
  assign offset__h9351 =
	     { instr__h5279[5], instr__h5279[12:10], instr__h5279[6], 2'b0 } ;
  assign offset__h9779 =
	     { instr__h5279[12],
	       instr__h5279[8],
	       instr__h5279[10:9],
	       instr__h5279[6],
	       instr__h5279[7],
	       instr__h5279[2],
	       instr__h5279[11],
	       instr__h5279[5:3],
	       1'b0 } ;
  assign output_stage2___1_data_to_stage3_frd_val__h7249 =
	     stage2_rg_stage2[304] ?
	       ((stage2_rg_stage2[615:613] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       stage2_rg_stage2[496:433] ;
  assign output_stage2___1_data_to_stage3_rd_val__h7278 =
	     stage2_rg_stage2[304] ?
	       stage2_rg_stage2[560:529] :
	       stage2_fbox$word_fst[31:0] ;
  assign output_stage2___1_data_to_stage3_trace_data_word1__h24404 =
	     stage2_rg_stage2[304] ?
	       stage2_rg_stage2[223:192] :
	       near_mem$dmem_word64[31:0] ;
  assign output_stage2___1_data_to_stage3_trace_data_word1__h24425 =
	     stage2_rg_stage2[304] ?
	       stage2_rg_stage2[223:192] :
	       output_stage2___1_data_to_stage3_rd_val__h7278 ;
  assign output_stage2___1_data_to_stage3_trace_data_word5__h24429 =
	     stage2_rg_stage2[304] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[63:0] ;
  assign rd__h9411 = { 2'b01, instr__h5279[4:2] } ;
  assign rd_val___1__h18515 =
	     rs1_val_bypassed__h5289 + _theResult___snd_snd__h20931 ;
  assign rd_val___1__h18597 =
	     rs1_val_bypassed__h5289 - _theResult___snd_snd__h20931 ;
  assign rd_val___1__h18604 =
	     ((rs1_val_bypassed__h5289 ^ 32'h80000000) <
	      (_theResult___snd_snd__h20931 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h18611 =
	     (rs1_val_bypassed__h5289 < _theResult___snd_snd__h20931) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h18618 =
	     rs1_val_bypassed__h5289 ^ _theResult___snd_snd__h20931 ;
  assign rd_val___1__h18625 =
	     rs1_val_bypassed__h5289 | _theResult___snd_snd__h20931 ;
  assign rd_val__h15616 =
	     (!stage3_rg_stage3[368] && stage3_rg_full &&
	      stage3_rg_stage3[407] &&
	      stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d738) ?
	       stage3_rg_stage3[401:370] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h15664 =
	     (stage3_rg_stage3[368] && stage3_rg_full &&
	      stage3_rg_stage3[407] &&
	      stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d730) ?
	       stage3_rg_stage3[362:299] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h15690 =
	     (stage3_rg_stage3[368] && stage3_rg_full &&
	      stage3_rg_stage3[407] &&
	      stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d738) ?
	       stage3_rg_stage3[362:299] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h15717 =
	     (stage3_rg_stage3[368] && stage3_rg_full &&
	      stage3_rg_stage3[407] &&
	      stage3_rg_stage3[406:402] == _theResult____h5281[31:27]) ?
	       stage3_rg_stage3[362:299] :
	       fpr_regfile$read_rs3 ;
  assign rd_val__h16485 =
	     (_theResult____h5281[14:12] == 3'd0 &&
	      (_theResult____h5281[6:0] != 7'b0110011 ||
	       !_theResult____h5281[30])) ?
	       rd_val___1__h18515 :
	       _theResult_____1_fst__h18601 ;
  assign rd_val__h16510 = { _theResult____h5281[31:12], 12'h0 } ;
  assign rd_val__h16534 = imem_c_rg_pc + rd_val__h16510 ;
  assign rd_val__h20831 = rs1_val_bypassed__h5289 << shamt__h16432 ;
  assign rd_val__h20883 = rs1_val_bypassed__h5289 >> shamt__h16432 ;
  assign rd_val__h20905 =
	     rs1_val_bypassed__h5289 >> shamt__h16432 |
	     ~(32'hFFFFFFFF >> shamt__h16432) &
	     {32{rs1_val_bypassed__h5289[31]}} ;
  assign rd_val__h8704 =
	     (!stage3_rg_stage3[368] && stage3_rg_full &&
	      stage3_rg_stage3[407] &&
	      stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d730) ?
	       stage3_rg_stage3[401:370] :
	       gpr_regfile$read_rs1 ;
  assign rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1348 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h5281[31:20] == 12'b000100000101 ;
  assign rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1426 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     _theResult____h5281[31:25] == 7'b0001001 ||
	     _theResult____h5281[11:7] != 5'd0 ||
	     _theResult____h5281[19:15] != 5'd0 ||
	     NOT_rg_cur_priv_0_EQ_0b11_286_316_AND_NOT_rg_c_ETC___d1424 ;
  assign rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2284 =
	     rg_state == 4'd3 &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_831___d1832 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2281 &&
	     !stage3_rg_full ;
  assign rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 =
	     rg_state == 4'd3 &&
	     csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2359 &&
	     !stage3_rg_full &&
	     !stage2_rg_full ;
  assign rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2451 =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2284 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     (NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d2441 ||
	      !near_mem$imem_exc &&
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d2447) ;
  assign rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2465 =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     !near_mem$imem_exc &&
	     _theResult____h5281[6:0] == 7'b0001111 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1277 ;
  assign rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2485 =
	     rg_state_9_EQ_3_824_AND_csr_regfile_csr_mip_re_ETC___d2362 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d2286 &&
	     !near_mem$imem_exc &&
	     _theResult____h5281[6:0] == 7'b0001111 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1264 ;
  assign rg_state_9_EQ_3_824_AND_stage3_rg_full_5_OR_st_ETC___d1891 =
	     rg_state == 4'd3 &&
	     (stage3_rg_full || stage2_rg_full || stage1_rg_full) &&
	     stage3_rg_full_5_OR_NOT_stage2_rg_full_01_58_O_ETC___d1879 &&
	     (csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1888 ||
	      stage2_rg_full ||
	      stage3_rg_full) ;
  assign rg_trap_info_319_BITS_67_TO_36_320_EQ_csr_regf_ETC___d2342 =
	     rg_trap_info[67:36] == csr_regfile$csr_trap_actions[97:66] ;
  assign rm__h16210 =
	     (_theResult____h5281[14:12] == 3'b111) ?
	       csr_regfile$read_frm :
	       _theResult____h5281[14:12] ;
  assign rs1__h9410 = { 2'b01, instr__h5279[9:7] } ;
  assign rs1_val__h33650 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 27'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed__h5289 =
	     (_theResult____h5281[19:15] == 5'd0) ? 32'd0 : val__h8706 ;
  assign rs2_val__h16240 =
	     (_theResult____h5281[24:20] == 5'd0) ? 32'd0 : val__h15618 ;
  assign shamt__h16432 =
	     (_theResult____h5281[6:0] == 7'b0010011) ?
	       _theResult____h5281[24:20] :
	       rs2_val__h16240[4:0] ;
  assign stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680 =
	     stage1_rg_full &&
	     (!near_mem$imem_valid ||
	      imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d358 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673) ;
  assign stage1_rg_full_21_AND_near_mem_imem_valid_AND__ETC___d1827 =
	     stage1_rg_full && near_mem$imem_valid &&
	     NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d684 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1825 ;
  assign stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1957 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1207 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1227 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1237 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1235 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1238 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1237 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1239 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1238 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1251 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1249 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1252 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1251 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1253 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1252 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1268 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     _theResult____h5281[6:0] == 7'b0001111 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1264 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1269 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1268 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1270 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1269 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1281 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     _theResult____h5281[6:0] == 7'b0001111 &&
	     IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1277 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1282 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1281 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1283 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1282 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1297 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1295 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1298 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1297 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1299 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1298 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1311 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     !near_mem$imem_exc &&
	     _theResult____h5281[6:0] == 7'b1110011 &&
	     _theResult____h5281[14:12] == 3'd0 &&
	     _theResult____h5281[11:7] == 5'd0 &&
	     _theResult____h5281[19:15] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     _theResult____h5281[31:20] == 12'b001100000010 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1312 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1311 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1313 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1312 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1334 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem_imem_exc__00_OR_NOT_rg_cur_priv_0_EQ__ETC___d1321) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1332 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1335 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1334 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1336 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1335 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1337 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1336 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1355 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem_imem_exc__00_OR_NOT_rg_cur_priv_0_EQ__ETC___d1321) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1353 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1356 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1355 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1357 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1356 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1358 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1200 ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1357 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1383 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     _theResult____h5281[6:0] != 7'b0001111 ||
	     NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1380 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1390 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     _theResult____h5281[6:0] != 7'b0001111 ||
	     NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1387 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1431 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'd0 ||
	      _theResult____h5281[11:7] != 5'd0 ||
	      _theResult____h5281[19:15] != 5'd0 ||
	      rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	      _theResult____h5281[31:20] != 12'b000100000010) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'd0 ||
	      rg_cur_priv_0_EQ_0b11_286_OR_rg_cur_priv_0_EQ__ETC___d1426) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1432 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'd0 ||
	      _theResult____h5281[11:7] != 5'd0 ||
	      _theResult____h5281[19:15] != 5'd0 ||
	      rg_cur_priv != 2'b11 ||
	      _theResult____h5281[31:20] != 12'b001100000010) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1431 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1433 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'd0 ||
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1392) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1432 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1436 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'b010 &&
	      _theResult____h5281[14:12] != 3'b110 &&
	      _theResult____h5281[14:12] != 3'b011 &&
	      _theResult____h5281[14:12] != 3'b111) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1383 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1390 &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1433 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1437 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      _theResult____h5281[6:0] != 7'b1110011 ||
	      _theResult____h5281[14:12] != 3'b001 &&
	      _theResult____h5281[14:12] != 3'b101) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1436 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1438 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1437 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1439 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1438 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1477 =
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     (_theResult____h5281[6:0] == 7'b0100011 ||
	      _theResult____h5281[6:0] == 7'b0100111) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1494 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     _theResult____h5281[6:0] != 7'b1100011 &&
	     _theResult____h5281[6:0] != 7'b1101111 &&
	     _theResult____h5281[6:0] != 7'b1100111 &&
	     (_theResult____h5281[6:0] == 7'b0110011 &&
	      _theResult____h5281[31:25] == 7'b0000001 ||
	      _theResult____h5281[6:0] != 7'b0010011 &&
	      _theResult____h5281[6:0] != 7'b0110011 &&
	      _theResult____h5281[6:0] != 7'b0110111 &&
	      _theResult____h5281[6:0] != 7'b0010111) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1520 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1494 &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      _theResult____h5281[6:0] != 7'b0000011 &&
	      _theResult____h5281[6:0] != 7'b0000111) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      _theResult____h5281[6:0] != 7'b0100011 &&
	      _theResult____h5281[6:0] != 7'b0100111) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      _theResult____h5281[6:0] != 7'b0110011 ||
	      _theResult____h5281[31:25] != 7'b0000001) &&
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      _theResult____h5281[6:0] != 7'b0101111) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1651 =
	     stage2_rg_full && stage2_rg_stage2[600:598] != 3'd0 &&
	     stage2_rg_stage2[600:598] != 3'd1 &&
	     stage2_rg_stage2[600:598] != 3'd4 &&
	     stage2_rg_stage2[600:598] != 3'd2 &&
	     stage2_rg_stage2[600:598] != 3'd3 &&
	     stage2_rg_stage2[304] &&
	     stage2_fbox$valid ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1706 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1332 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1707 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1706 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1711 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046) &&
	     NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	     NOT_near_mem_imem_exc__00_051_AND_IF_imem_c_rg_ETC___d1353 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1712 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	      stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034) &&
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1711 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1970 =
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 ||
	     stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1034 &&
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1046 ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d665 =
	     stage2_rg_full && stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d280 &&
	     (IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661 ||
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663) ;
  assign stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d673 =
	     stage2_rg_full && stage2_rg_stage2[600:598] != 3'd0 &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d309 &&
	     (IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667 ||
	      IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d668 ||
	      IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139) &&
	     stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1959 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1961 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     stage2_rg_stage2[600:598] != 3'd1 &&
	     stage2_rg_stage2[600:598] != 3'd4 &&
	     stage2_rg_stage2[600:598] != 3'd2 &&
	     stage2_rg_stage2[600:598] != 3'd3 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1963 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      stage2_rg_stage2[600:598] == 3'd1 ||
	      stage2_rg_stage2[600:598] == 3'd4 ||
	      stage2_rg_stage2[600:598] == 3'd2 ||
	      stage2_rg_stage2[600:598] == 3'd3) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1965 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3 ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1967 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_st_ETC__q4) ;
  assign stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d728 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      stage2_rg_stage2[600:598] != 3'd1 &&
	      stage2_rg_stage2[600:598] != 3'd4 &&
	      NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d725) ;
  assign stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 =
	     stage2_rg_stage2[600:598] != 3'd1 &&
	     stage2_rg_stage2[600:598] != 3'd4 &&
	     stage2_rg_stage2[600:598] != 3'd2 ||
	     !near_mem$dmem_valid ||
	     !near_mem$dmem_exc ;
  assign stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d202 =
	     IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	     stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 &&
	     stage2_rg_stage2[600:598] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3 ;
  assign stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d231 =
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139) &&
	     stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 &&
	     (stage2_rg_stage2[600:598] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_st_ETC__q4) ;
  assign stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_2_08_ETC___d286 =
	     stage2_rg_stage2[600:598] == 3'd2 ||
	     ((stage2_rg_stage2[600:598] == 3'd3) ?
		stage2_mbox$valid :
		stage2_rg_stage2[304] || stage2_fbox$valid) ;
  assign stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945 =
	     { stage2_rg_stage2[95:64],
	       CASE_stage2_rg_stage2_BITS_600_TO_598_2_stage2_ETC__q26 } ;
  assign stage3_rg_full_5_OR_NOT_stage2_rg_full_01_58_O_ETC___d1879 =
	     (stage3_rg_full || !stage2_rg_full ||
	      stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155) &&
	     (stage3_rg_full || stage2_rg_full || !stage1_rg_full ||
	      NOT_near_mem_imem_valid_23_OR_imem_c_rg_pc_BIT_ETC___d1876) ;
  assign stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d730 =
	     stage3_rg_stage3[406:402] == _theResult____h5281[19:15] ;
  assign stage3_rg_stage3_7_BITS_406_TO_402_6_EQ_IF_ime_ETC___d738 =
	     stage3_rg_stage3[406:402] == _theResult____h5281[24:20] ;
  assign td1_rd__h36424 = { 3'd0, csr_regfile$csr_ret_actions[33:32] } ;
  assign td_word1__h26290 = alu_outputs___1_trace_data_word1__h25519 ;
  assign theResult__281_BITS_31_TO_20__q18 = _theResult____h5281[31:20] ;
  assign theResult__281_BITS_31_TO_25_CONCAT_theResult__ETC__q8 =
	     { _theResult____h5281[31:25], _theResult____h5281[11:7] } ;
  assign theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q6 =
	     { _theResult____h5281[31],
	       _theResult____h5281[7],
	       _theResult____h5281[30:25],
	       _theResult____h5281[11:8],
	       1'b0 } ;
  assign theResult__281_BIT_31_CONCAT_theResult__281_BI_ETC__q7 =
	     { _theResult____h5281[31],
	       _theResult____h5281[19:12],
	       _theResult____h5281[20],
	       _theResult____h5281[30:21],
	       1'b0 } ;
  assign trace_data___1_word2__h24115 =
	     stage3_rg_stage3[191:160] |
	     { 27'd0, csr_regfile$mv_update_fcsr_fflags } ;
  assign trap_info_tval__h20031 =
	     (_theResult____h5281[6:0] != 7'b1101111 &&
	      _theResult____h5281[6:0] != 7'b1100111 &&
	      (_theResult____h5281[6:0] != 7'b1110011 ||
	       _theResult____h5281[14:12] != 3'd0 ||
	       _theResult____h5281[11:7] != 5'd0 ||
	       _theResult____h5281[19:15] != 5'd0 ||
	       _theResult____h5281[31:20] != 12'b0 &&
	       _theResult____h5281[31:20] != 12'b000000000001)) ?
	       (NOT_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_c_ETC___d682 ?
		  _theResult____h5281 :
		  { 16'd0, instr__h5279[15:0] }) :
	       CASE_theResult__281_BITS_6_TO_0_0b1100111_data_ETC__q19 ;
  assign val__h15618 =
	     (stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d728 &&
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d663) ?
	       x_out_bypass_rd_val__h8368 :
	       rd_val__h15616 ;
  assign val__h8706 =
	     (stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d728 &&
	      IF_stage2_rg_full_01_THEN_IF_stage2_rg_stage2__ETC___d661) ?
	       x_out_bypass_rd_val__h8368 :
	       rd_val__h8704 ;
  assign value__h20111 =
	     near_mem$imem_exc ? imem_c_rg_tval : trap_info_tval__h20031 ;
  assign wdata_from_gpr__h30281 = { 32'd0, data_to_stage2_val2__h16063 } ;
  assign x__h24176 =
	     stage3_rg_stage3[369] ?
	       trace_data___1_word2__h24115 :
	       stage3_rg_stage3[191:160] ;
  assign x__h24190 =
	     (stage3_rg_stage3[369] || stage3_rg_stage3[368]) ?
	       csr_regfile$mv_update_mstatus_fs :
	       stage3_rg_stage3[95:64] ;
  assign x__h32937 = { 32'd0, rg_trap_info[67:36] } ;
  assign x__h33055 =
	     csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d2346[63:0] /
	     _theResult____h33054 ;
  assign x__h34093 =
	     { IF_csr_regfilemav_csr_write_BIT_32_THEN_2_ELSE_0__q1[31:1],
	       1'd1 } ;
  assign x__h35176 =
	     ((rg_trap_instr[19:15] != 5'd0 &&
	       csr_regfile$mav_csr_write[32]) ?
		32'd2 :
		32'd0) |
	     ((rg_trap_instr[19:15] == 5'd0) ? 32'd0 : 32'd1) ;
  assign x__h35240 = { 52'd0, rg_trap_instr[31:20] } ;
  assign x__h35249 = { 32'd0, csr_regfile$mav_csr_write[31:0] } ;
  assign x_exc_code__h41614 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_data_to_stage2_fval1__h16080 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1651 &&
	      IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d667) ?
	       x_out_fbypass_rd_val__h8555 :
	       rd_val__h15664 ;
  assign x_out_data_to_stage2_fval3__h16082 =
	     (stage2_rg_full_01_AND_NOT_stage2_rg_stage2_02__ETC___d1651 &&
	      IF_NOT_stage2_rg_full_01_58_OR_stage2_rg_stage_ETC___d671) ?
	       x_out_fbypass_rd_val__h8555 :
	       rd_val__h15717 ;
  assign x_out_data_to_stage2_instr__h16074 =
	     imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_c__ETC___d350 ?
	       instr___1__h8760 :
	       instr__h5279 ;
  assign x_out_data_to_stage2_val2__h16079 =
	     (_theResult____h5281[6:0] == 7'b1100011) ?
	       branch_target__h16244 :
	       ((_theResult____h5281[6:0] == 7'b0110011 &&
		 _theResult____h5281[31:25] == 7'b0000001) ?
		  rs2_val__h16240 :
		  CASE_theResult__281_BITS_6_TO_0_0b100011_rs2_v_ETC__q9) ;
  assign x_out_next_pc__h15783 =
	     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1204 ?
	       data_to_stage2_addr__h16061 :
	       fall_through_pc__h15768 ;
  assign x_out_trap_info_exc_code__h20034 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h17692 ;
  assign x_rd__h32676 = { 3'd0, csr_regfile$csr_trap_actions[1:0] } ;
  assign y__h34969 = ~rs1_val__h34691 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4: value__h7751 = stage2_rg_stage2[664:633];
      default: value__h7751 = stage2_rg_stage2[664:633];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h7861 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h7861 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4: value__h7965 = stage2_rg_stage2[592:561];
      default: value__h7965 = 32'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h7334 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h7334 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h7330 = stage2_rg_stage2[597:593];
      3'd2: x_out_data_to_stage3_rd__h7330 = 5'd0;
      default: x_out_data_to_stage3_rd__h7330 = stage2_rg_stage2[597:593];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h8367 = stage2_rg_stage2[597:593];
      default: x_out_bypass_rd__h8367 = stage2_rg_stage2[597:593];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4: x_out_fbypass_rd__h8554 = stage2_rg_stage2[597:593];
      default: x_out_fbypass_rd__h8554 = stage2_rg_stage2[597:593];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h34691 = rg_csr_val1;
      default: rs1_val__h34691 = { 27'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or
	  output_stage2___1_data_to_stage3_frd_val__h7249)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd2, 3'd3:
	  x_out_data_to_stage3_frd_val__h7335 = stage2_rg_stage2[496:433];
      3'd1, 3'd4:
	  x_out_data_to_stage3_frd_val__h7335 =
	      output_stage2___1_data_to_stage3_frd_val__h7249;
      default: x_out_data_to_stage3_frd_val__h7335 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_rd_val__h7278 or
	  near_mem$dmem_word64 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h7331 = stage2_rg_stage2[560:529];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h7331 = near_mem$dmem_word64[31:0];
      3'd3: x_out_data_to_stage3_rd_val__h7331 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h7331 =
		   output_stage2___1_data_to_stage3_rd_val__h7278;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_rd_val__h7278 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd1, 3'd4:
	  x_out_bypass_rd_val__h8368 = stage2_rg_stage2[560:529];
      3'd3: x_out_bypass_rd_val__h8368 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h8368 =
		   output_stage2___1_data_to_stage3_rd_val__h7278;
    endcase
  end
  always@(stage2_rg_stage2 or _theResult___snd_fst_rd_val__h8536)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4: x_out_fbypass_rd_val__h8555 = stage2_rg_stage2[496:433];
      default: x_out_fbypass_rd_val__h8555 =
		   _theResult___snd_fst_rd_val__h8536;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 =
	      near_mem$dmem_valid;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_ne_ETC__q2 =
	      !near_mem$dmem_valid;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_ne_ETC__q2 =
	      !stage2_mbox$valid;
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_ne_ETC__q2 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d162 =
		   stage2_rg_stage2[600:598] == 3'd5 && !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171 =
		   stage2_rg_stage2[600:598] != 3'd5 || stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3 =
	      stage2_rg_stage2[304];
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_1_stage2_ETC__q3 =
		   stage2_rg_stage2[600:598] != 3'd2 &&
		   stage2_rg_stage2[600:598] != 3'd3 &&
		   stage2_rg_stage2[304];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_st_ETC__q4 =
	      !stage2_rg_stage2[304];
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_1_NOT_st_ETC__q4 =
		   stage2_rg_stage2[600:598] == 3'd2 ||
		   stage2_rg_stage2[600:598] == 3'd3 ||
		   !stage2_rg_stage2[304];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d262 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[304] ||
	      stage2_rg_stage2[597:593] == 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d262 =
		   stage2_rg_stage2[600:598] == 3'd2 ||
		   stage2_rg_stage2[600:598] != 3'd3 && stage2_rg_stage2[304];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      !stage2_rg_stage2[304] &&
	      stage2_rg_stage2[597:593] != 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269 =
		   stage2_rg_stage2[600:598] != 3'd2 &&
		   (stage2_rg_stage2[600:598] == 3'd3 ||
		    !stage2_rg_stage2[304]);
    endcase
  end
  always@(stage2_rg_stage2 or
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d279 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d280 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      !stage2_rg_stage2[304] &&
	      stage2_rg_stage2[597:593] != 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d280 =
		   NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d279;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_2_08_ETC___d286 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[304] ||
	      stage2_rg_stage2[597:593] == 5'd0;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287 =
		   stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_2_08_ETC___d286;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d295 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[304];
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d295 =
		   stage2_rg_stage2[600:598] == 3'd2 ||
		   stage2_rg_stage2[600:598] == 3'd3 ||
		   !stage2_rg_stage2[304];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[304];
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300 =
		   stage2_rg_stage2[600:598] != 3'd2 &&
		   stage2_rg_stage2[600:598] != 3'd3 &&
		   stage2_rg_stage2[304];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[304];
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314 =
		   stage2_rg_stage2[600:598] == 3'd2 ||
		   stage2_rg_stage2[600:598] == 3'd3 ||
		   !stage2_rg_stage2[304] ||
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d309 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[304];
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d309 =
		   stage2_rg_stage2[600:598] != 3'd2 &&
		   stage2_rg_stage2[600:598] != 3'd3 &&
		   stage2_rg_stage2[304] &&
		   !stage2_fbox$valid;
    endcase
  end
  always@(_theResult____h5281)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0110011,
      7'b0110111,
      7'b1100111,
      7'b1101111:
	  x_out_data_to_stage2_rd__h16076 = _theResult____h5281[11:7];
      7'b1100011: x_out_data_to_stage2_rd__h16076 = 5'd0;
      default: x_out_data_to_stage2_rd__h16076 = _theResult____h5281[11:7];
    endcase
  end
  always@(_theResult____h5281 or rs2_val__h16240)
  begin
    case (_theResult____h5281[6:0])
      7'b0100011, 7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b100011_rs2_v_ETC__q9 =
	      rs2_val__h16240;
      default: CASE_theResult__281_BITS_6_TO_0_0b100011_rs2_v_ETC__q9 =
		   rs2_val__h16240;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746)
  begin
    case (_theResult____h5281[14:12])
      3'd0:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744;
      3'b001:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744;
      3'b100:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746;
      3'b101:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746;
      3'b110:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1040 =
		   _theResult____h5281[14:12] != 3'b111 ||
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746)
  begin
    case (_theResult____h5281[14:12])
      3'd0:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744;
      3'b001:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d744;
      3'b100:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746;
      3'b101:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
	      !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d746;
      3'b110:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d755 =
		   _theResult____h5281[14:12] == 3'b111 &&
		   !IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d748;
    endcase
  end
  always@(_theResult____h5281)
  begin
    case (_theResult____h5281[14:12])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_theResult__281_BITS_14_TO_12_0b10_NOT_the_ETC__q10 =
	      _theResult____h5281[6:0] != 7'b0010011 &&
	      _theResult____h5281[31] &&
	      _theResult____h5281[30] &&
	      _theResult____h5281[29:25] != 5'b0;
      default: CASE_theResult__281_BITS_14_TO_12_0b10_NOT_the_ETC__q10 =
		   _theResult____h5281[14:12] != 3'b111 ||
		   _theResult____h5281[6:0] != 7'b0010011 &&
		   _theResult____h5281[31] &&
		   _theResult____h5281[30] &&
		   _theResult____h5281[29:25] != 5'b0;
    endcase
  end
  always@(_theResult____h5281 or
	  csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019 or
	  csr_regfile$read_mstatus or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850)
  begin
    case (_theResult____h5281[6:0])
      7'b0000111, 7'b0100111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      _theResult____h5281[14:12] != 3'b010 &&
	      _theResult____h5281[14:12] != 3'b011;
      7'b0101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023 =
		   csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866 ||
		   NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958 &&
		   NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011:
	  CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11 =
	      _theResult____h5281[14:12] != 3'd0 &&
	      _theResult____h5281[14:12] != 3'b100 &&
	      _theResult____h5281[14:12] != 3'b001 &&
	      _theResult____h5281[14:12] != 3'b101 &&
	      _theResult____h5281[14:12] != 3'b010;
      7'b0100011:
	  CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11 =
	      _theResult____h5281[14:12] != 3'd0 &&
	      _theResult____h5281[14:12] != 3'b001 &&
	      _theResult____h5281[14:12] != 3'b010;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11 =
		   _theResult____h5281[6:0] == 7'b0001111 ||
		   _theResult____h5281[6:0] == 7'b1110011 ||
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1023;
    endcase
  end
  always@(_theResult____h5281 or
	  CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798)
  begin
    case (_theResult____h5281[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798;
      default: CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q12 =
		   _theResult____h5281[6:0] != 7'b0110111 &&
		   _theResult____h5281[6:0] != 7'b0010111 &&
		   CASE_theResult__281_BITS_6_TO_0_0b11_NOT_theRe_ETC__q11;
    endcase
  end
  always@(_theResult____h5281)
  begin
    case (_theResult____h5281[14:12])
      3'b010, 3'b011, 3'b100, 3'b110:
	  CASE_theResult__281_BITS_14_TO_12_0b10_theResu_ETC__q13 =
	      _theResult____h5281[6:0] == 7'b0010011 ||
	      !_theResult____h5281[31] ||
	      !_theResult____h5281[30] ||
	      _theResult____h5281[29:25] == 5'b0;
      default: CASE_theResult__281_BITS_14_TO_12_0b10_theResu_ETC__q13 =
		   _theResult____h5281[14:12] == 3'b111 &&
		   (_theResult____h5281[6:0] == 7'b0010011 ||
		    !_theResult____h5281[31] ||
		    !_theResult____h5281[30] ||
		    _theResult____h5281[29:25] == 5'b0);
    endcase
  end
  always@(_theResult____h5281 or
	  NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185 or
	  csr_regfile$read_mstatus)
  begin
    case (_theResult____h5281[6:0])
      7'b0000111, 7'b0100111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189 =
	      csr_regfile$read_mstatus[14:13] != 2'h0 &&
	      (_theResult____h5281[14:12] == 3'b010 ||
	       _theResult____h5281[14:12] == 3'b011);
      7'b0101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189 =
	      (_theResult____h5281[31:27] == 5'b00010 &&
	       _theResult____h5281[24:20] == 5'd0 ||
	       _theResult____h5281[31:27] == 5'b00011 ||
	       _theResult____h5281[31:27] == 5'b0 ||
	       _theResult____h5281[31:27] == 5'b00001 ||
	       _theResult____h5281[31:27] == 5'b01100 ||
	       _theResult____h5281[31:27] == 5'b01000 ||
	       _theResult____h5281[31:27] == 5'b00100 ||
	       _theResult____h5281[31:27] == 5'b10000 ||
	       _theResult____h5281[31:27] == 5'b11000 ||
	       _theResult____h5281[31:27] == 5'b10100 ||
	       _theResult____h5281[31:27] == 5'b11100) &&
	      _theResult____h5281[14:12] == 3'b010;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189 =
		   NOT_csr_regfile_read_mstatus__1_BITS_14_TO_13__ETC___d1104 &&
		   (IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1148 ||
		    IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1185);
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011:
	  CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14 =
	      _theResult____h5281[14:12] == 3'd0 ||
	      _theResult____h5281[14:12] == 3'b100 ||
	      _theResult____h5281[14:12] == 3'b001 ||
	      _theResult____h5281[14:12] == 3'b101 ||
	      _theResult____h5281[14:12] == 3'b010;
      7'b0100011:
	  CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14 =
	      _theResult____h5281[14:12] == 3'd0 ||
	      _theResult____h5281[14:12] == 3'b001 ||
	      _theResult____h5281[14:12] == 3'b010;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14 =
		   _theResult____h5281[6:0] != 7'b0001111 &&
		   _theResult____h5281[6:0] != 7'b1110011 &&
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1189;
    endcase
  end
  always@(_theResult____h5281 or
	  CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14 or
	  IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1072)
  begin
    case (_theResult____h5281[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__281_BITS_6_TO_0_0b10011_IF_ime_ETC__q15 =
	      IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_ETC___d1072;
      default: CASE_theResult__281_BITS_6_TO_0_0b10011_IF_ime_ETC__q15 =
		   _theResult____h5281[6:0] == 7'b0110111 ||
		   _theResult____h5281[6:0] == 7'b0010111 ||
		   CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q14;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q16 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q16 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q16 = 4'd11;
    endcase
  end
  always@(_theResult____h5281 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q16)
  begin
    case (_theResult____h5281[31:20])
      12'b0:
	  CASE_theResult__281_BITS_31_TO_20_0b0_CASE_rg__ETC__q17 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q16;
      12'b000000000001:
	  CASE_theResult__281_BITS_31_TO_20_0b0_CASE_rg__ETC__q17 = 4'd3;
      default: CASE_theResult__281_BITS_31_TO_20_0b0_CASE_rg__ETC__q17 = 4'd2;
    endcase
  end
  always@(_theResult____h5281 or alu_outputs___1_exc_code__h16923)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b1100011:
	  alu_outputs_exc_code__h17692 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h17692 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h17692 = alu_outputs___1_exc_code__h16923;
      default: alu_outputs_exc_code__h17692 = 4'd2;
    endcase
  end
  always@(_theResult____h5281 or
	  eaddr__h16609 or
	  eaddr__h16560 or
	  rs1_val_bypassed__h5289 or
	  alu_outputs___1_addr__h16267 or
	  alu_outputs___1_addr__h16335 or alu_outputs___1_addr__h16298)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h16077 = eaddr__h16560;
      7'b0100011: x_out_data_to_stage2_addr__h16077 = eaddr__h16609;
      7'b0101111: x_out_data_to_stage2_addr__h16077 = rs1_val_bypassed__h5289;
      7'b1100011:
	  x_out_data_to_stage2_addr__h16077 = alu_outputs___1_addr__h16267;
      7'b1100111:
	  x_out_data_to_stage2_addr__h16077 = alu_outputs___1_addr__h16335;
      7'b1101111:
	  x_out_data_to_stage2_addr__h16077 = alu_outputs___1_addr__h16298;
      default: x_out_data_to_stage2_addr__h16077 = eaddr__h16609;
    endcase
  end
  always@(_theResult____h5281 or imem_c_rg_pc or data_to_stage2_addr__h16061)
  begin
    case (_theResult____h5281[6:0])
      7'b1100111, 7'b1101111:
	  CASE_theResult__281_BITS_6_TO_0_0b1100111_data_ETC__q19 =
	      data_to_stage2_addr__h16061;
      default: CASE_theResult__281_BITS_6_TO_0_0b1100111_data_ETC__q19 =
		   (_theResult____h5281[6:0] == 7'b1110011 &&
		    _theResult____h5281[14:12] == 3'd0 &&
		    _theResult____h5281[11:7] == 5'd0 &&
		    _theResult____h5281[19:15] == 5'd0 &&
		    _theResult____h5281[31:20] == 12'b000000000001) ?
		     imem_c_rg_pc :
		     32'd0;
    endcase
  end
  always@(_theResult____h5281 or
	  alu_outputs___1_trace_data_pc__h25691 or
	  alu_outputs___1_addr__h16267 or
	  alu_outputs___1_addr__h16335 or alu_outputs___1_addr__h16298)
  begin
    case (_theResult____h5281[6:0])
      7'b1100011:
	  alu_outputs_trace_data_pc__h25734 = alu_outputs___1_addr__h16267;
      7'b1100111:
	  alu_outputs_trace_data_pc__h25734 = alu_outputs___1_addr__h16335;
      7'b1101111:
	  alu_outputs_trace_data_pc__h25734 = alu_outputs___1_addr__h16298;
      default: alu_outputs_trace_data_pc__h25734 =
		   alu_outputs___1_trace_data_pc__h25691;
    endcase
  end
  always@(_theResult____h5281 or
	  _theResult_____1_fst__h18636 or
	  rd_val___1__h18604 or
	  rd_val___1__h18611 or rd_val___1__h18618 or rd_val___1__h18625)
  begin
    case (_theResult____h5281[14:12])
      3'b010: _theResult_____1_fst__h18608 = rd_val___1__h18604;
      3'b011: _theResult_____1_fst__h18608 = rd_val___1__h18611;
      3'b100: _theResult_____1_fst__h18608 = rd_val___1__h18618;
      3'b110: _theResult_____1_fst__h18608 = rd_val___1__h18625;
      default: _theResult_____1_fst__h18608 = _theResult_____1_fst__h18636;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1857 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923 =
		   stage2_fbox$valid;
    endcase
  end
  always@(_theResult____h5281 or
	  alu_outputs___1_trace_data_word1__h25519 or
	  rd_val__h16485 or rd_val__h16534 or rd_val__h16510)
  begin
    case (_theResult____h5281[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 =
	      rd_val__h16485;
      7'b0010111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 =
	      rd_val__h16534;
      7'b0100011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 =
	      alu_outputs___1_trace_data_word1__h25519;
      7'b0110111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 =
	      rd_val__h16510;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2077 =
		   alu_outputs___1_trace_data_word1__h25519;
    endcase
  end
  always@(_theResult____h5281 or
	  rs1_val_bypassed__h5289 or
	  rd_val__h16485 or
	  rd_val__h16534 or
	  alu_outputs___1_val1__h16957 or
	  rd_val__h16510 or alu_outputs___1_val1__h16927)
  begin
    case (_theResult____h5281[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
	      rd_val__h16485;
      7'b0010111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
	      rd_val__h16534;
      7'b0101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
	      alu_outputs___1_val1__h16957;
      7'b0110111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
	      rd_val__h16510;
      7'b1110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
	      alu_outputs___1_val1__h16927;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1620 =
		   rs1_val_bypassed__h5289;
    endcase
  end
  always@(_theResult____h5281 or
	  rs1_val_bypassed__h5289 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1621 or
	  alu_outputs___1_trace_data_pc__h25691)
  begin
    case (_theResult____h5281[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h16078 =
	      alu_outputs___1_trace_data_pc__h25691;
      default: x_out_data_to_stage2_val1__h16078 =
		   (_theResult____h5281[6:0] == 7'b0110011 &&
		    _theResult____h5281[31:25] == 7'b0000001) ?
		     rs1_val_bypassed__h5289 :
		     IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d1621;
    endcase
  end
  always@(_theResult____h5281 or
	  csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019 or
	  csr_regfile$read_mstatus or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1387 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1380 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2297)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      _theResult____h5281[14:12] != 3'd0 &&
	      _theResult____h5281[14:12] != 3'b100 &&
	      _theResult____h5281[14:12] != 3'b001 &&
	      _theResult____h5281[14:12] != 3'b101 &&
	      _theResult____h5281[14:12] != 3'b010;
      7'b0000111, 7'b0100111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      _theResult____h5281[14:12] != 3'b010 &&
	      _theResult____h5281[14:12] != 3'b011;
      7'b0001111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1387 &&
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1380;
      7'b0100011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      _theResult____h5281[14:12] != 3'd0 &&
	      _theResult____h5281[14:12] != 3'b001 &&
	      _theResult____h5281[14:12] != 3'b010;
      7'b0101111:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d850;
      7'b1110011:
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2297;
      default: IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 =
		   csr_regfile_read_mstatus__1_BITS_14_TO_13_2_EQ_ETC___d866 ||
		   NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d958 &&
		   NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d1019;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301 or
	  NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798)
  begin
    case (_theResult____h5281[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q20 =
	      NOT_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT__ETC___d798;
      default: CASE_theResult__281_BITS_6_TO_0_0b10011_NOT_IF_ETC__q20 =
		   _theResult____h5281[6:0] != 7'b0110111 &&
		   _theResult____h5281[6:0] != 7'b0010111 &&
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2301;
    endcase
  end
  always@(_theResult____h5281 or
	  alu_outputs___1_trace_data_word2__h25696 or
	  alu_outputs___1_trace_data_word2__h25520 or rs2_val__h16240)
  begin
    case (_theResult____h5281[6:0])
      7'b0100011, 7'b0100111:
	  CASE_theResult__281_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
	      alu_outputs___1_trace_data_word2__h25520;
      7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
	      rs2_val__h16240;
      default: CASE_theResult__281_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
		   alu_outputs___1_trace_data_word2__h25696;
    endcase
  end
  always@(_theResult____h5281 or
	  alu_outputs___1_trace_data_word3__h25488 or
	  alu_outputs___1_trace_data_word3__h25521 or
	  alu_outputs___1_trace_data_word3__h25584)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22 =
	      alu_outputs___1_trace_data_word3__h25488;
      7'b0100011, 7'b0100111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22 =
	      alu_outputs___1_trace_data_word3__h25521;
      7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22 =
	      alu_outputs___1_trace_data_word3__h25584;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_alu_outpu_ETC__q22 =
		   64'h00000000AAAAAAAA;
    endcase
  end
  always@(_theResult____h5281 or csr_regfile$read_mstatus or td_word1__h26290)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_csr_regfi_ETC__q23 =
	      csr_regfile$read_mstatus;
      7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_csr_regfi_ETC__q23 =
	      td_word1__h26290;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_csr_regfi_ETC__q23 =
		   csr_regfile$read_mstatus;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2064)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b1100111,
      7'b1101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q24 =
	      _theResult____h5281[11:7];
      default: CASE_theResult__281_BITS_6_TO_0_0b11_theResult_ETC__q24 =
		   IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2064;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2078 or
	  alu_outputs___1_trace_data_pc__h25691)
  begin
    case (_theResult____h5281[6:0])
      7'b1100111, 7'b1101111:
	  CASE_theResult__281_BITS_6_TO_0_0b1100111_alu__ETC__q25 =
	      alu_outputs___1_trace_data_pc__h25691;
      default: CASE_theResult__281_BITS_6_TO_0_0b1100111_alu__ETC__q25 =
		   IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2078;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word5__h24429)
  begin
    case (stage2_rg_stage2[600:598])
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_2_stage2_ETC__q26 =
	      stage2_rg_stage2[63:0];
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_2_stage2_ETC__q26 =
		   output_stage2___1_data_to_stage3_trace_data_word5__h24429;
    endcase
  end
  always@(_theResult____h5281 or
	  IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2049 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2046 or
	  IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2047)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2046;
      7'b0001111, 7'b1100011, 7'b1110011:
	  CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 = 5'd5;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111, 7'b1100111, 7'b1101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 = 5'd6;
      7'b0100011, 7'b0100111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 =
	      IF_IF_imem_c_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d2047;
      7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 = 5'd13;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_IF_IF_ime_ETC__q27 =
		   IF_NOT_csr_regfile_read_mstatus__1_BITS_14_TO__ETC___d2049;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h24425 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h24404 or
	  stage2_mbox$word)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0, 3'd2:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935 =
	      stage2_rg_stage2[223:192];
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935 =
	      output_stage2___1_data_to_stage3_trace_data_word1__h24404;
      3'd3:
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935 =
	      stage2_mbox$word;
      default: IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_ETC___d1935 =
		   output_stage2___1_data_to_stage3_trace_data_word1__h24425;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945 or
	  IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939)
  begin
    case (stage2_rg_stage2[600:598])
      3'd0:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_0_stage2_ETC__q28 =
	      stage2_rg_stage2[95:0];
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_0_stage2_ETC__q28 =
	      IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939;
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_0_stage2_ETC__q28 =
		   stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945;
    endcase
  end
  always@(_theResult____h5281)
  begin
    case (_theResult____h5281[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29 = 3'd2;
      7'b0101111:
	  CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29 = 3'd4;
      default: CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29 = 3'd5;
    endcase
  end
  always@(_theResult____h5281 or
	  CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29)
  begin
    case (_theResult____h5281[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_theResult__281_BITS_6_TO_0_0b1100011_0_0b_ETC__q30 = 3'd0;
      default: CASE_theResult__281_BITS_6_TO_0_0b1100011_0_0b_ETC__q30 =
		   (_theResult____h5281[6:0] == 7'b0110011 &&
		    _theResult____h5281[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__281_BITS_6_TO_0_0b11_1_0b111_1_ETC__q29;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h24425 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h24404 or
	  stage2_mbox$word)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31 =
	      output_stage2___1_data_to_stage3_trace_data_word1__h24404;
      3'd2:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31 =
	      stage2_rg_stage2[223:192];
      3'd3:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31 =
	      stage2_mbox$word;
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_1_output_ETC__q31 =
		   output_stage2___1_data_to_stage3_trace_data_word1__h24425;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945 or
	  IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939)
  begin
    case (stage2_rg_stage2[600:598])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_600_TO_598_1_IF_sta_ETC__q32 =
	      IF_stage2_rg_stage2_02_BIT_304_94_THEN_csr_reg_ETC___d1939;
      default: CASE_stage2_rg_stage2_BITS_600_TO_598_1_IF_sta_ETC__q32 =
		   stage2_rg_stage2_02_BITS_95_TO_64_940_CONCAT_I_ETC___d1945;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	imem_c_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_prev_mip <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_c_rg_cache_addr$EN)
	  imem_c_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY
	      imem_c_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_prev_mip$EN)
	  rg_prev_mip <= `BSV_ASSIGNMENT_DELAY rg_prev_mip$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_c_rg_cache_b16$EN)
      imem_c_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_cache_b16$D_IN;
    if (imem_c_rg_f3$EN)
      imem_c_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_c_rg_f3$D_IN;
    if (imem_c_rg_mstatus_MXR$EN)
      imem_c_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY
	  imem_c_rg_mstatus_MXR$D_IN;
    if (imem_c_rg_pc$EN)
      imem_c_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_c_rg_pc$D_IN;
    if (imem_c_rg_priv$EN)
      imem_c_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_c_rg_priv$D_IN;
    if (imem_c_rg_satp$EN)
      imem_c_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_c_rg_satp$D_IN;
    if (imem_c_rg_sstatus_SUM$EN)
      imem_c_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY
	  imem_c_rg_sstatus_SUM$D_IN;
    if (imem_c_rg_tval$EN)
      imem_c_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_c_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (rg_trap_trace_data$EN)
      rg_trap_trace_data <= `BSV_ASSIGNMENT_DELAY rg_trap_trace_data$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_c_rg_cache_addr = 32'hAAAAAAAA;
    imem_c_rg_cache_b16 = 17'h0AAAA;
    imem_c_rg_f3 = 3'h2;
    imem_c_rg_mstatus_MXR = 1'h0;
    imem_c_rg_pc = 32'hAAAAAAAA;
    imem_c_rg_priv = 2'h2;
    imem_c_rg_satp = 32'hAAAAAAAA;
    imem_c_rg_sstatus_SUM = 1'h0;
    imem_c_rg_tval = 32'hAAAAAAAA;
    rg_csr_pc = 32'hAAAAAAAA;
    rg_csr_val1 = 32'hAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_prev_mip = 32'hAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    rg_trap_trace_data =
	299'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	667'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 =
	474'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[368] || !stage3_rg_full ||
	   !stage3_rg_stage3[407]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[368] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[407])
	$write("Rd %0d ",
	       stage3_rg_stage3[406:402],
	       "rd_val:%h",
	       stage3_rg_stage3[401:370]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[368] || !stage3_rg_full ||
	   !stage3_rg_stage3[407]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[368] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[407])
	$write("FRd %0d ",
	       stage3_rg_stage3[406:402],
	       "frd_val:%h",
	       stage3_rg_stage3[362:299]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[664:633],
		 stage2_rg_stage2[632:601],
		 stage2_rg_stage2[666:665]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[664:633]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[664:633],
	       stage2_rg_stage2[632:601],
	       stage2_rg_stage2[666:665]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d164)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139) &&
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d171))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 &&
	  stage2_rg_stage2[600:598] != 3'd0 &&
	  stage2_rg_stage2[600:598] != 3'd1 &&
	  stage2_rg_stage2[600:598] != 3'd4 &&
	  stage2_rg_stage2[600:598] != 3'd2 &&
	  stage2_rg_stage2[600:598] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h7334);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139) &&
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d155 &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   stage2_rg_stage2[600:598] == 3'd1 ||
	   stage2_rg_stage2[600:598] == 3'd4 ||
	   stage2_rg_stage2[600:598] == 3'd2 ||
	   stage2_rg_stage2[600:598] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d202)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7330,
	       x_out_data_to_stage3_frd_val__h7335);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_0_04_ETC___d231)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7330,
	       x_out_data_to_stage3_rd_val__h7331);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", value__h7751);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", x_out_trap_info_exc_code__h7861);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", value__h7965, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", value__h7751);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", x_out_trap_info_exc_code__h7861);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d135)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d139 &&
	  NOT_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ__ETC___d143)
	$write("'h%h", value__h7965, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d157)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[600:598] != 3'd0 &&
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d262))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269))
	$write("Rd %0d ", x_out_bypass_rd__h8367);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[600:598] != 3'd0 &&
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d262))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269 &&
	  stage2_rg_stage2[600:598] != 3'd0 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d280)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d269) &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d287))
	$write("rd_val:%h", x_out_bypass_rd_val__h8368);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d295))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[600:598] != 3'd0 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300)
	$write("FRd %0d ", x_out_fbypass_rd__h8554);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d295))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[600:598] != 3'd0 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d309)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[600:598] != 3'd0 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d300 &&
	  IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d314)
	$write("frd_val:%h", x_out_fbypass_rd_val__h8555);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("Output_Stage1", " BUSY pc:%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1221)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1228)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1240)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1254)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1271)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1284)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1300)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1314)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1338)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1359)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1441)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_c_rg_pc,
	       x_out_data_to_stage2_instr__h16074,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1450)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1463)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1479)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1483)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1487)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1522)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h16076);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h16077,
	       x_out_data_to_stage2_val1__h16078,
	       x_out_data_to_stage2_val2__h16079);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h16080,
	       alu_outputs___1_fval2__h16631,
	       x_out_data_to_stage2_fval3__h16082);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1683)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1686)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1689)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1692)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1695)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1698)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1701)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1704)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1709)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1714)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1717)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("'h%h", imem_c_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("'h%h", x_out_trap_info_exc_code__h20034);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1049)
	$write("'h%h", value__h20111, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1208)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_21_AND_NOT_near_mem_imem_valid__ETC___d680)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_mip_cmd &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_mip_cmd: MIP new 0x%0h, old 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_mip_read,
		 rg_prev_mip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_319_BITS_67_TO_36_320_EQ_csr_regf_ETC___d2342)
	$display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_319_BITS_67_TO_36_320_EQ_csr_regf_ETC___d2342)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h33056,
		 cpifrac__h33057,
		 delta_CPI_cycles__h33052,
		 _theResult____h33054);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_319_BITS_67_TO_36_320_EQ_csr_regf_ETC___d2342)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[67:36],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3661 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 rg_trap_info[67:36],
		 rg_trap_info[31:0],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h33650,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h33650,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h34691,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h34691,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h15783);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3661 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (WILL_FIRE_RL_imem_c_rl_assert_fail)
      begin
        v__h2271 = $stime;
	#0;
      end
    v__h2265 = v__h2271 / 32'd10;
    if (WILL_FIRE_RL_imem_c_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2265);
    if (WILL_FIRE_RL_imem_c_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h",
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[407] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	  stage3_rg_stage3[368])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[406:402],
		 stage3_rg_stage3[362:299]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[407] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	  !stage3_rg_stage3[368])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[406:402],
		 stage3_rg_stage3[401:370]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[664:633],
	       stage2_rg_stage2[632:601],
	       stage2_rg_stage2[666:665]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_IF_stage2_rg_stage2_02_B_ETC___d1957)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1959)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1961)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h7334);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1963)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1965)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7330,
	       x_out_data_to_stage3_frd_val__h7335);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1967)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7330,
	       x_out_data_to_stage3_rd_val__h7331);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_01_AND_stage2_rg_stage2_02_BITS_ETC___d1954)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[600:598] == 3'd0 ||
	   IF_stage2_rg_stage2_02_BITS_600_TO_598_03_EQ_1_ETC___d1923) &&
	  cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[664:633],
		 stage2_rg_stage2[632:601],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_c_rg_pc,
	       x_out_data_to_stage2_instr__h16074,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2201)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d1974 &&
	  stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_c_rg_pc_BITS__ETC___d1975 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48 &&
	  NOT_stage2_rg_full_01_58_OR_stage2_rg_stage2_0_ETC___d1218 &&
	  (_theResult____h5281[6:0] == 7'b0000011 ||
	   _theResult____h5281[6:0] == 7'b0000111))
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2205)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2207)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2209)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2211)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h16076);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h16077,
	       x_out_data_to_stage2_val1__h16078,
	       x_out_data_to_stage2_val2__h16079);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h16080,
	       alu_outputs___1_fval2__h16631,
	       x_out_data_to_stage2_fval3__h16082);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2199)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__830_EQ_rg_prev_mip_8_ETC___d2222 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h15783);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3661 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_c_rg_pc,
		 x_out_data_to_stage2_instr__h16074,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d48)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3661 != 4'd0)
	$display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

